package elvira.tools.statistics.miscellany;/** * class contructor of sort. */public class Sort {	Sort() {	}		/**	 * Quicksort sorts an array in inceasing order, using recursive method.	 * See the detail in the program notation.	 */	static void QuickSort(double a[], int lo0, int hi0)    {      int lo = lo0;      int hi = hi0;      double mid;      if ( hi0 > lo0)      {         /* Arbitrarily establishing partition element as the midpoint of          * the array.          */         mid = a[ ( lo0 + hi0 ) / 2 ];         // loop through the array until indices cross         while( lo <= hi )         {            /* find the first element that is greater than or equal to              * the partition element starting from the left Index.             */	     while( ( lo < hi0 ) && ( a[lo] < mid ))		 ++lo;            /* find an element that is smaller than or equal to              * the partition element starting from the right Index.             */	     while( ( hi > lo0 )  && ( a[hi] > mid ))		 --hi;            // if the indexes have not crossed, swap            if( lo <= hi )             {               swap(a, lo, hi);               ++lo;               --hi;            }         }         /* If the right index has not reached the left side of array          * must now sort the left partition.          */         if( lo0 < hi )            QuickSort( a, lo0, hi );         /* If the left index has not reached the right side of array          * must now sort the right partition.          */         if( lo < hi0 )            QuickSort( a, lo, hi0 );      }   }		/**	 * Exchange ith and ith element in the arrat a.	 */	   static void swap(double a[], int i, int j)   {      double T;      T = a[i];       a[i] = a[j];      a[j] = T;   }	/**	 * Sort method envoke quicksort.	 */    public static void sort(double a[])    {      QuickSort(a, 0, a.length - 1);   }}