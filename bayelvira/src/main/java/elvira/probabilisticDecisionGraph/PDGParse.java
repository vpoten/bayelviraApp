/* Generated By:JavaCC: Do not edit this line. PDGParse.java */
//import java.util.Vector;
//import java.util.Enumeration;

package elvira.probabilisticDecisionGraph;

import elvira.probabilisticDecisionGraph.tools.*;
import elvira.*;
import java.io.*;
import java.util.*;



public class PDGParse implements PDGParseConstants {

    String Name;
    String Title;
    String Comment;
    public NodeList Nodes,outputNodes;

    public static void main(String args[]) throws ParseException, IOException, PDGException {
        PDG myPDG;
        FileInputStream f;
        //FileWriter f2;
        f = new FileInputStream(args[0]);
        PDGParse parser = new PDGParse(f);
        myPDG = parser.parse();
        System.out.println("A PDG model was successfully constructed from file '"+args[0]+"'");
    }


    private Vector<PDGVariableNode> extractChildren(Map<String, PDGVariableNode> nameToObj,
                                                    Vector<String> names,
                                                    Vector<PDGVariableNode> all_children) throws ParseException {
        Vector<PDGVariableNode> retval = new Vector<PDGVariableNode>();
        PDGVariableNode pdgn;
        for(String name : names){
            pdgn = nameToObj.get(name);
            if(pdgn == null){
                throw new ParseException("Variable name '"+name+"' found in child list, "+
                                         "but no definition was found!");
            } else if(all_children.contains(pdgn)){
                throw new ParseException("Variable '"+name+"' found in multiple child lists!");
            }
            all_children.add(pdgn);
            retval.add(pdgn);
        }
        return retval;
    }

    PDGParameterNode[] parsePNChildren(PDGParameterNode pn,
                                       PDGVariableNode successor) throws ParseException {
        PDGParameterNode[] childrenNodes = new PDGParameterNode[pn.getValues().length];
        PDGParameterNode chNode;
        Vector<Integer> childIds;
        childIds=parseIntegerList();
        if(childIds.size() != childrenNodes.length){
            throw new ParseException("Read '"+childIds.size()
                                     +"' children for PDGParameterNode '"+pn.id
                                     +"', it needs '"+childrenNodes.length+"'");
        }
        for(int i=0;i<childIds.size();i++){
            chNode = successor.getPNodeById(childIds.elementAt(i));
            if(chNode==null){
                throw new ParseException("Did not find PDGParameterNode with id '"+childIds.elementAt(i)
                                        +"' in variable node '"+successor.getName()
                                        +"' - it is listed as child of PDGParameterNode '"+pn.id+"'");
            }
            childrenNodes[i] = chNode;
        }
        return childrenNodes;
    }

  final public PDG parse() throws ParseException, PDGException {
    Token t;
    PDGVariableNode var;
    HashMap<String, PDGVariableNode> vars=new HashMap<String, PDGVariableNode>();
    Vector<PDGVariableNode> forest;
    String name;
    jj_consume_token(PDG);
    t = jj_consume_token(STRING);
          name=t.image.substring(1,t.image.length()-1);
    jj_consume_token(OPEN_CURLY);
    label_1:
    while (true) {
      if (jj_2_1(4)) {
        ;
      } else {
        break label_1;
      }
      var = parseVariable();
           vars.put(var.getName(), var);
    }
    forest = parseStructure(vars);
    jj_consume_token(CLOSE_CURLY);
    jj_consume_token(0);
         {if (true) return new PDG(forest, name);}
    throw new Error("Missing return statement in function");
  }

  final private PDGVariableNode parseVariable() throws ParseException, PDGException {
        Token t;
        FiniteStates var = new FiniteStates();
        Vector s;
        PDGVariableNode pdgVarNode;
    jj_consume_token(NODE);
    t = jj_consume_token(WORD);
          var.setName(t.image);
    jj_consume_token(OPEN_PAREN);
    t = jj_consume_token(NODE_TYPE);
          var.setTypeOfVariable(t.image);
    jj_consume_token(CLOSE_PAREN);
    jj_consume_token(OPEN_CURLY);
    if (jj_2_2(4)) {
      jj_consume_token(TITLE);
      jj_consume_token(EQUAL);
      t = jj_consume_token(STRING);
      jj_consume_token(30);
          var.setTitle(t.image.substring(1,t.image.length()-1));
    } else {
      ;
    }
    jj_consume_token(STATES);
    jj_consume_token(EQUAL);
    s = parseStates();
          var.setStates(s);
    jj_consume_token(30);
          pdgVarNode = new PDGVariableNode(var);
    parsePNodes(pdgVarNode);
    jj_consume_token(CLOSE_CURLY);
          {if (true) return pdgVarNode;}
    throw new Error("Missing return statement in function");
  }

  final private Vector<PDGVariableNode> parseStructure(Map<String, PDGVariableNode> nameToVar) throws ParseException, ParseException, PDGException {
  Token t;
  Vector<String> schildren;
  PDGVariableNode pdgvn;
  Vector<PDGVariableNode> is_parent = new Vector<PDGVariableNode>();
  Vector<PDGVariableNode> is_child = new Vector<PDGVariableNode>();
  Vector<PDGVariableNode> nchildren;
    jj_consume_token(STRUCTURE);
    jj_consume_token(OPEN_CURLY);
    label_2:
    while (true) {
      if (jj_2_3(4)) {
        ;
      } else {
        break label_2;
      }
      t = jj_consume_token(WORD);
      jj_consume_token(ARC);
      schildren = parseWordList();
                pdgvn=nameToVar.get(t.image);
                if(pdgvn==null){
                    {if (true) throw new ParseException("Found variable name '"+t.image+
                                             "' in structure definition, but no definition of that "+
                                             "variable was found!");}
                }
                if(is_parent.contains(pdgvn)){
                    {if (true) throw new ParseException("Multiple parent defenitions of variable '"+t.image+
                                             "', only one is allowed!");}
                }
                is_parent.add(pdgvn);
                nchildren=extractChildren(nameToVar, schildren, is_child);
                pdgvn.addSuccessors(nchildren);
      parsePNStructure(pdgvn);
    }
    jj_consume_token(CLOSE_CURLY);
           Vector<PDGVariableNode> roots = new Vector<PDGVariableNode>();
           for(PDGVariableNode pn : is_parent){
               if(!is_child.contains(pn)) roots.add(pn);
           }
           {if (true) return roots;}
    throw new Error("Missing return statement in function");
  }

  final private Vector<String> parseWordList() throws ParseException {
    Token t;
    Vector<String> names = new Vector<String>();
    jj_consume_token(OPEN_PAREN);
    label_3:
    while (true) {
      if (jj_2_4(4)) {
        ;
      } else {
        break label_3;
      }
      t = jj_consume_token(WORD);
                                names.add(t.image);
    }
    jj_consume_token(CLOSE_PAREN);
          {if (true) return names;}
    throw new Error("Missing return statement in function");
  }

  final public Vector<Integer> parseIntegerList() throws ParseException {
    Token t;
    Vector<Integer> retval = new Vector<Integer>();
    jj_consume_token(OPEN_PAREN);
    label_4:
    while (true) {
      if (jj_2_5(4)) {
        ;
      } else {
        break label_4;
      }
      t = jj_consume_token(INTEGER);
              retval.add(Integer.parseInt(t.image));
    }
    jj_consume_token(CLOSE_PAREN);
         {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final private Vector<String> parseStates() throws ParseException {
  Token t;
  Vector<String> retval=new Vector<String>();
    jj_consume_token(OPEN_PAREN);
    label_5:
    while (true) {
      if (jj_2_6(4)) {
        ;
      } else {
        break label_5;
      }
      t = jj_consume_token(STRING);
          retval.add(t.image.substring(1,t.image.length()-1));
    }
    jj_consume_token(CLOSE_PAREN);
          {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final private void parsePNodes(PDGVariableNode var) throws ParseException, ParseException, PDGException {
        Token t;
        PDGParameterNode pdgn;
        Vector<PDGParameterNode> parameterNodeVector = new Vector<PDGParameterNode>();
        double[] vals;
        int id;
    label_6:
    while (true) {
      jj_consume_token(PNODE);
      jj_consume_token(OPEN_CURLY);
      jj_consume_token(ID);
      jj_consume_token(EQUAL);
      t = jj_consume_token(INTEGER);
            id = Integer.parseInt(t.image);
            vals=new double[var.getNumStates()];
      jj_consume_token(30);
      jj_consume_token(VALUES);
      jj_consume_token(EQUAL);
      parseFloatTable(vals);
      jj_consume_token(30);
      jj_consume_token(CLOSE_CURLY);
        pdgn = new PDGParameterNode(var);
        pdgn.id = id;
        pdgn.setValues(vals);
      if (jj_2_7(4)) {
        ;
      } else {
        break label_6;
      }
    }
  }

  final private void parsePNStructure(PDGVariableNode var) throws ParseException, ParseException, PDGException {
    Token t;
    Vector<PDGVariableNode> succs=var.getSuccessors();
    int id, i;
    Vector<PDGParameterNode> nodes=new Vector<PDGParameterNode>(var.getParameterNodesCopy());
    PDGParameterNode pnode;
    Vector<Integer> childIds;
    PDGParameterNode[][] children;
    PDGParameterNode[] childrenColumn;
    PDGParameterNode child;
    int successorIndex;
    jj_consume_token(OPEN_CURLY);
    label_7:
    while (true) {
      t = jj_consume_token(INTEGER);
             id=Integer.parseInt(t.image);
             pnode=var.getPNodeById(id);
             if(pnode==null){
                 {if (true) throw new ParseException("PDGParameterNode with id '"+id+"'"+
                                       " not found in PDGVariableNode '"+var.getName()+"'"+
                                       " but it appears in structure definition!");}
             }
             if(!nodes.remove(pnode)){
                 {if (true) throw new ParseException("Found multible definitions of children for PDGParameterNode '"+id+"'!");}
             }
             children = new PDGParameterNode[var.getSuccessors().size()][var.getNumStates()];
      jj_consume_token(ARC);
             successorIndex=0;
      label_8:
      while (true) {
        jj_consume_token(OPEN_PAREN);
         childIds = new Vector<Integer>();
        label_9:
        while (true) {
          t = jj_consume_token(INTEGER);
          childIds.add(Integer.parseInt(t.image));
          if (jj_2_8(4)) {
            ;
          } else {
            break label_9;
          }
        }
        jj_consume_token(CLOSE_PAREN);
          childrenColumn = new PDGParameterNode[pnode.getValues().length];
          if(childrenColumn.length != childIds.size()){
              {if (true) throw new ParseException("Incorrect number of children for PDGParameterNode id '"
                                       +pnode.id+"', found '"+childIds.size()+"' but need '"+
                                       childrenColumn.length+"'");}
          }
          i=0;
          PDGVariableNode y = succs.elementAt(successorIndex);
          for(Integer childId : childIds){
              child = y.getPNodeById(childId);
              if(childId == null){
                  {if (true) throw new ParseException("Could not find PDGParameterNode with id '"+childId
                                           +"' in PDGVariableNode '"+y.getName()+"'");}
              }
              childrenColumn[i++]=child;
          }
          children[successorIndex]=childrenColumn;
          successorIndex++;
        if (jj_2_9(4)) {
          ;
        } else {
          break label_8;
        }
      }
      jj_consume_token(30);
             if(successorIndex != children.length){
                 {if (true) throw new ParseException("Found '"+successorIndex+
                                          "' sets of children for PDGParameterNode '"+
                                          pnode.id+"', need '"+children.length+"'");}
             }
             pnode.unsafeSetAllChildren(children);
      if (jj_2_10(4)) {
        ;
      } else {
        break label_7;
      }
    }
    jj_consume_token(CLOSE_CURLY);
  }

  final private void parseFloatTable(double[] vals) throws ParseException {
  int i=0;
  Token t;
    jj_consume_token(TABLE);
    jj_consume_token(OPEN_PAREN);
    label_10:
    while (true) {
      if (jj_2_11(4)) {
        ;
      } else {
        break label_10;
      }
      t = jj_consume_token(FLOAT);
          vals[i]=Double.parseDouble(t.image); i++;
    }
    jj_consume_token(CLOSE_PAREN);
          if(i<vals.length) {if (true) throw new ParseException("too few values for PDGParameterNode!");}
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(WORD)) return true;
    if (jj_scan_token(ARC)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(INTEGER)) return true;
    if (jj_scan_token(ARC)) return true;
    Token xsp;
    if (jj_3_9()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(TITLE)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(STRING)) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(OPEN_PAREN)) return true;
    Token xsp;
    if (jj_3_8()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSE_PAREN)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_scan_token(OPEN_PAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSE_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_scan_token(NODE)) return true;
    if (jj_scan_token(WORD)) return true;
    if (jj_scan_token(OPEN_PAREN)) return true;
    if (jj_scan_token(NODE_TYPE)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(PNODE)) return true;
    if (jj_scan_token(OPEN_CURLY)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  public PDGParseTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[11];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public PDGParse(java.io.InputStream stream) {
     this(stream, null);
  }
  public PDGParse(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PDGParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PDGParse(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PDGParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PDGParse(PDGParseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(PDGParseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[31];
    for (int i = 0; i < 31; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 31; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 11; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
