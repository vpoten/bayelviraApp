/* NetworkPropertiesDialog.java */

package elvira.gui;

import java.awt.*;
import javax.swing.*;
import javax.swing.border.*;
import java.util.*;
import elvira.*;

/**
 * A class that produce a Dialog for editing the general properties
 * of a network
 *
 * @author fjdiez, ratienza
 * @version 0.1
 * @since 21/10/99
 */

public class NetworkPropertiesDialog extends javax.swing.JDialog
{

   /**
    * Creates a NetworkFropertiesDialog with all its elements and
    * fill the textarea with the information get from the current
    * network
    *
    * @param frame The owner of the dialog
    */

	public NetworkPropertiesDialog(Frame parent)
	{
		super(parent);
		dialogBundle = Elvira.getElviraFrame().getDialogBundle();

		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setResizable(false);
		setModal(true);
		setTitle(localize(dialogBundle,"NetProperties.Title.label"));
		getContentPane().setLayout(null);
		setSize(398,328);
		setVisible(false);
		getContentPane().add(TabbedPane);
		TabbedPane.setBounds(0,0,396,276);
		definitionPanel.setLayout(null);
		TabbedPane.add(definitionPanel);
		definitionPanel.setBounds(2,27,391,246);
		definitionPanel.setVisible(false);
		networkTypePanel.setAlignmentY(0.0F);
		networkTypePanel.setLayout(null);
		definitionPanel.add(networkTypePanel);
		
		//networkTypePanel.setBounds(10,21,188,120);
		//networkTypePanel.setBounds(10,21,202,144);
		networkTypePanel.setBounds(10,21,202,168);
		bNetRadioButton.setText(localize(dialogBundle,
		         "NetProperties.Bnet.label"));
		bNetRadioButton.setActionCommand("Bayes Network");
		networkTypePanel.add(bNetRadioButton);
		bNetRadioButton.setBounds(24,16,113,25);
	
		mNetRadioButton.setText(localize(dialogBundle,
		         "NetProperties.Mnet.label"));
		mNetRadioButton.setActionCommand("Markov Network");
		mNetRadioButton.setEnabled(false);
		networkTypePanel.add(mNetRadioButton);
		mNetRadioButton.setBounds(24,40,120,25);
		
		iDiagramRadioButton.setText(localize(dialogBundle,
		         "NetProperties.IDiagram.label"));
		iDiagramRadioButton.setActionCommand("Influence Diagram");
		networkTypePanel.add(iDiagramRadioButton);
		iDiagramRadioButton.setBounds(24,64,160,25);
		
		cGraphRadioButton.setText(localize(dialogBundle,
		         "NetProperties.Chain.label"));
		cGraphRadioButton.setActionCommand("Chain Graph");
		cGraphRadioButton.setEnabled(false);
		networkTypePanel.add(cGraphRadioButton);
		cGraphRadioButton.setBounds(24,88,120,25);
		
		danRadioButton.setText(localize(dialogBundle,
		         "NetProperties.Dan.label"));
		danRadioButton.setActionCommand("Decision Analysis Network");
		networkTypePanel.add(danRadioButton);
		danRadioButton.setBounds(24,112,165,25);
		
		uidRadioButton.setText(localize(dialogBundle,
        "NetProperties.UID.label"));
danRadioButton.setActionCommand("Unconstrained Influence Diagram");
networkTypePanel.add(uidRadioButton);
uidRadioButton.setBounds(24,136,165,25);
		
		
		variablesTypePanel.setLayout(null);
		definitionPanel.add(variablesTypePanel);
		variablesTypePanel.setBounds(214,21,167,120);
		continuousRadioButton.setText(localize(dialogBundle,
		         "NetProperties.Continuous.label"));
		continuousRadioButton.setActionCommand("Continuous");
		continuousRadioButton.setEnabled(false);
		variablesTypePanel.add(continuousRadioButton);
		continuousRadioButton.setBounds(36,55,96,25);
		discretesRadioButton.setText(localize(dialogBundle,
		         "NetProperties.Discrete.label"));
		discretesRadioButton.setActionCommand("Discretes");
		variablesTypePanel.add(discretesRadioButton);
		discretesRadioButton.setBounds(36,25,96,24);
		bothRadioButton.setText(localize(dialogBundle,
		         "NetProperties.Both.label"));
		bothRadioButton.setActionCommand("Both");
		bothRadioButton.setEnabled(false);
		variablesTypePanel.add(bothRadioButton);
		bothRadioButton.setBounds(36,85,84,24);
		nameLabel.setText(localize(dialogBundle,
		         "NetProperties.Name.label"));
		definitionPanel.add(nameLabel);
		nameLabel.setBounds(34,192,100,36);
		definitionPanel.add(nameTextField);
		nameTextField.setBounds(142,201,189,22);
		infoPanel.setLayout(null);
		TabbedPane.add(infoPanel);
		infoPanel.setBounds(2,27,391,246);
		infoPanel.setVisible(false);
		titleLabel.setText(localize(dialogBundle,
		         "NetProperties.NetTitle.label"));
		infoPanel.add(titleLabel);
		titleLabel.setBounds(22,21,40,15);
		authorLabel.setText(localize(dialogBundle,
		         "NetProperties.Author.label"));
		infoPanel.add(authorLabel);
		authorLabel.setBounds(22,53,48,15);
		infoPanel.add(titleTextField);
		titleTextField.setBounds(104,18,240,21);
		commentLabel.setText(localize(dialogBundle,
		         "NetProperties.Comment.label"));
		infoPanel.add(commentLabel);
		commentLabel.setBounds(22,85,80,15);
		infoPanel.add(authorTextField);
		authorTextField.setBounds(104,50,240,21);
		commentScrollPane.setOpaque(true);
		infoPanel.add(commentScrollPane);
		commentScrollPane.setBounds(104,82,240,60);
		commentScrollPane.getViewport().add(commentTextArea);
		commentTextArea.setBounds(0,0,237,57);
		whenChangedLabel.setText(localize(dialogBundle,
		         "NetProperties.Last.label"));
		infoPanel.add(whenChangedLabel);
		whenChangedLabel.setBounds(22,153,118,21);
		infoPanel.add(whenChangedTextField);
		whenChangedTextField.setBounds(152,152,192,21);
		whoChangedLabel.setText(localize(dialogBundle,
		         "NetProperties.Changed.label"));
		infoPanel.add(whoChangedLabel);
		whoChangedLabel.setBounds(22,182,82,24);
		infoPanel.add(whoChangedTextField);
		whoChangedTextField.setBounds(104,184,240,21);
		versionLabel.setText(localize(dialogBundle,
		         "NetProperties.Version.label"));
		infoPanel.add(versionLabel);
		versionLabel.setBounds(22,214,70,24);
		infoPanel.add(versionTextField);
		versionTextField.setBounds(104,216,240,21);
                defaultsPanel.setLayout(null);
		TabbedPane.add(defaultsPanel);
		defaultsPanel.setBounds(2,27,391,246);
                defaultStatesLabel.setText(localize(dialogBundle,"NetProperties.DefaultStates.label"));
                defaultsPanel.add(defaultStatesLabel);
                defaultStatesLabel.setBounds(22,20,120,15);
                defaultsPanel.add(defaultStatesComboBox);
                defaultStatesComboBox.setBounds(140,18,170,21);
                defaultStatesComboBox.setSelectedIndex(-1);
		TabbedPane.setSelectedComponent(definitionPanel);
		TabbedPane.setSelectedIndex(0);
		TabbedPane.setTitleAt(0,localize(dialogBundle,
		         "NetProperties.Definition.label"));
		TabbedPane.setTitleAt(1,localize(dialogBundle,
		         "NetProperties.Info.label"));
                TabbedPane.setTitleAt(2,localize(dialogBundle,
                         "NetProperties.Defaults.label"));
		okButton.setText("OK");
		okButton.setActionCommand("OK");
		okButton.setMnemonic((int)'O');
		getContentPane().add(okButton);
		okButton.setBounds(72,288,108,36);
		cancelButton.setText(localize(dialogBundle,"Cancel.label"));
		cancelButton.setActionCommand("Cancel");
		cancelButton.setMnemonic((int)'C');
		getContentPane().add(cancelButton);
		cancelButton.setBounds(228,288,108,36);
		//}}

		networkTypePanel.setBorder(new TitledBorder(
		   localize(dialogBundle,"NetProperties.NetType.label")));

		networkTypeGroup.add (bNetRadioButton);
		networkTypeGroup.add (mNetRadioButton);
		networkTypeGroup.add (iDiagramRadioButton);
		networkTypeGroup.add (cGraphRadioButton);
		networkTypeGroup.add(danRadioButton);
		networkTypeGroup.add(uidRadioButton);
		

		variablesTypePanel.setBorder (new TitledBorder (
		   localize(dialogBundle,"NetProperties.VarType.label")));

		variablesTypeGroup.add (continuousRadioButton);
		variablesTypeGroup.add (discretesRadioButton);
		variablesTypeGroup.add (bothRadioButton);

		setLocationRelativeTo(Elvira.getElviraFrame());

		//{{REGISTER_LISTENERS
		SymAction lSymAction = new SymAction();
                SymItem lSymItem = new SymItem();
                NSymAction kSymAction = new NSymAction();
                TabbedPane.registerKeyboardAction(kSymAction, javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE,0,false),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
                definitionPanel.registerKeyboardAction(kSymAction, javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE,0,false),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
                networkTypePanel.registerKeyboardAction(kSymAction, javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE,0,false),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
                variablesTypePanel.registerKeyboardAction(kSymAction, javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE,0,false),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
                infoPanel.registerKeyboardAction(kSymAction, javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE,0,false),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
                defaultsPanel.registerKeyboardAction(kSymAction, javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE,0,false),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
                cancelButton.registerKeyboardAction(kSymAction, javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE,0,false),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
                okButton.registerKeyboardAction(kSymAction, javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE,0,false),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
		cancelButton.addActionListener(lSymAction);
                cancelButton.registerKeyboardAction(lSymAction, javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER,0,false),JComponent.WHEN_FOCUSED);
		okButton.addActionListener(lSymAction);
                okButton.registerKeyboardAction(lSymAction, javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER,0,false),JComponent.WHEN_FOCUSED);
                defaultStatesComboBox.addItemListener(lSymItem);
		//}}
	}


	/**
	 * Creates a new NetworkPropertiesDialog with no parent frame
	 */

	public NetworkPropertiesDialog()
	{
		this((Frame)null);
	}

	public NetworkPropertiesDialog(Frame parent, boolean isNew, Bnet bn, boolean isEditable)
	{
	   this (parent);
	   newNetwork = isNew;
	   bayesNet = bn;
	   setEditableFields(isEditable);
	   fillDialog();
	}


	/**
	 * Creates a new NetworkPropertiesDialog and set its title
	 */

	public NetworkPropertiesDialog(String sTitle)
	{
		this();
		setTitle(sTitle);
	}

	/**
	 * Shows or hide the NetworkPropertiesDialog and set its location
	 */

	public void setVisible(boolean b)
	{
		if (b)
			setLocation(50, 50);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new NetworkPropertiesDialog()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height);
	}

	public boolean isCancel () {
	   return cancel;
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

        Object[][] data = { {"s1", localize(Elvira.getElviraFrame().getDialogBundle(),"States.present")}, {"s0", localize(Elvira.getElviraFrame().getDialogBundle(),"States.absent")} };
        Object[][] data2 = { {"s1", localize(Elvira.getElviraFrame().getDialogBundle(),"States.yes")}, {"s0", localize(Elvira.getElviraFrame().getDialogBundle(),"States.no")} };
        Object[][] data3 = { {"s1", localize(Elvira.getElviraFrame().getDialogBundle(),"States.positive")}, {"s0", localize(Elvira.getElviraFrame().getDialogBundle(),"States.negative")} };
        Object[][] data4 = { {"s3", localize(Elvira.getElviraFrame().getDialogBundle(),"States.severe")}, {"s2", localize(Elvira.getElviraFrame().getDialogBundle(),"States.moderate")},
		                  {"s1", localize(Elvira.getElviraFrame().getDialogBundle(),"States.mild")}, {"s0", localize(Elvira.getElviraFrame().getDialogBundle(),"States.absent")} };
        Object[][] data5 = { {"s2", localize(Elvira.getElviraFrame().getDialogBundle(),"States.high")}, {"s1", localize(Elvira.getElviraFrame().getDialogBundle(),"States.medium")}, {"s0", localize(Elvira.getElviraFrame().getDialogBundle(),"States.low")} };
        
	//{{DECLARE_CONTROLS
	javax.swing.JTabbedPane TabbedPane = new javax.swing.JTabbedPane();
	javax.swing.JPanel definitionPanel = new javax.swing.JPanel();
	javax.swing.JPanel networkTypePanel = new javax.swing.JPanel();
        javax.swing.JPanel defaultsPanel = new javax.swing.JPanel();
        javax.swing.JLabel defaultStatesLabel = new javax.swing.JLabel();
        javax.swing.JComboBox defaultStatesComboBox = new javax.swing.JComboBox(); 
	javax.swing.JRadioButton bNetRadioButton = new javax.swing.JRadioButton();
	javax.swing.JRadioButton mNetRadioButton = new javax.swing.JRadioButton();
	javax.swing.JRadioButton iDiagramRadioButton = new javax.swing.JRadioButton();
	javax.swing.JRadioButton cGraphRadioButton = new javax.swing.JRadioButton();
	javax.swing.JRadioButton danRadioButton = new javax.swing.JRadioButton();
	javax.swing.JRadioButton uidRadioButton = new javax.swing.JRadioButton();
	javax.swing.JPanel variablesTypePanel = new javax.swing.JPanel();
	javax.swing.JRadioButton continuousRadioButton = new javax.swing.JRadioButton();
	javax.swing.JRadioButton discretesRadioButton = new javax.swing.JRadioButton();
	javax.swing.JRadioButton bothRadioButton = new javax.swing.JRadioButton();
	javax.swing.JLabel nameLabel = new javax.swing.JLabel();
	javax.swing.JTextField nameTextField = new javax.swing.JTextField();
	javax.swing.JPanel infoPanel = new javax.swing.JPanel();
	javax.swing.JLabel titleLabel = new javax.swing.JLabel();
	javax.swing.JLabel authorLabel = new javax.swing.JLabel();
	javax.swing.JTextField titleTextField = new javax.swing.JTextField();
	javax.swing.JLabel commentLabel = new javax.swing.JLabel();
	javax.swing.JTextField authorTextField = new javax.swing.JTextField();
	javax.swing.JScrollPane commentScrollPane = new javax.swing.JScrollPane();
	javax.swing.JTextArea commentTextArea = new javax.swing.JTextArea();
	javax.swing.JLabel whenChangedLabel = new javax.swing.JLabel();
	javax.swing.JTextField whenChangedTextField = new javax.swing.JTextField();
	javax.swing.JLabel whoChangedLabel = new javax.swing.JLabel();
	javax.swing.JTextField whoChangedTextField = new javax.swing.JTextField();
	javax.swing.JLabel versionLabel = new javax.swing.JLabel();
	javax.swing.JTextField versionTextField = new javax.swing.JTextField();
	javax.swing.JButton okButton = new javax.swing.JButton();
	javax.swing.JButton cancelButton = new javax.swing.JButton();
	//}}

	ButtonGroup networkTypeGroup = new ButtonGroup();
	ButtonGroup variablesTypeGroup = new ButtonGroup();
	protected ResourceBundle dialogBundle;

	/**
	 * This dialog must do an especific actions when is displayed when a
	 * new network is created. This variable is used to know
	 */
	boolean newNetwork = false;
	Bnet bayesNet;
	boolean cancel = false;


	/**
	 * Get a string with the given name of the budle
	 */

        public String localize (ResourceBundle bundle, String name) {
          return ElviraFrame.localize(bundle, name);
        }


        public void setEditableFields (boolean isEditable) {
          nameTextField.setEditable(isEditable);
          titleTextField.setEditable(isEditable);
          authorTextField.setEditable(isEditable);
          commentTextArea.setEditable(isEditable);
          whenChangedTextField.setEditable(isEditable);
          whoChangedTextField.setEditable(isEditable);
          versionTextField.setEditable(isEditable);
        }


        /**
         * <P>Fill the values in the dialog area. The values are taken
         * from the NetworkFrame actually active </P>
         * <P>In this moment the actions for getting the Network Type and
         * the type of variables of the network are not implemented because
         * Elvira only can manage Bayessian Networks with discrete variables </P>
         */

        public void fillDialog() {

          try {
            nameTextField.setText(bayesNet.getName());
          } catch (NullPointerException e) {
            nameTextField.setText("");
          }

          try {
            titleTextField.setText(bayesNet.getTitle());
          } catch (NullPointerException e) {
            titleTextField.setText("");
          }

          try {
            authorTextField.setText(bayesNet.getAuthor());
          } catch (NullPointerException e) {
            authorTextField.setText("");
          }

          try {
            commentTextArea.setText(bayesNet.getComment());
          } catch (NullPointerException e) {
            commentTextArea.setText("");
          }

          try {
            whenChangedTextField.setText(bayesNet.getWhenChanged());
          } catch (NullPointerException e) {
            whenChangedTextField.setText("");
          }

          try {
            whoChangedTextField.setText(bayesNet.getWhoChanged());
          } catch (NullPointerException e) {
            whoChangedTextField.setText("");
          }

          try {
            versionTextField.setText(Float.toString(bayesNet.getVersion()));
          } catch (NullPointerException e) {
            versionTextField.setText("1.0");
          }

          if (!newNetwork) {
            if (bayesNet.getClass()==IDWithSVNodes.class) {
				iDiagramRadioButton.setSelected(true);
            }
            else {
              bNetRadioButton.setSelected(true);
            }
          }
          else
            bNetRadioButton.setSelected(true);

          discretesRadioButton.setSelected(true);
          
          String s = "EditVariable.Values.label", number;
          for (int i=1; i<=6; i++) {
            number = Integer.toString(i);
            defaultStatesComboBox.addItem(localize(dialogBundle,s+number));
          }
          
       	  data[0][1] = localize(dialogBundle,"States.present");
	  data[1][1] = localize(dialogBundle,"States.absent");

	  data2[0][1] = localize(dialogBundle,"States.yes");
	  data2[1][1] = localize(dialogBundle,"States.no");

	  data3[0][1] = localize(dialogBundle,"States.positive");
	  data3[1][1] = localize(dialogBundle,"States.negative");

	  data4[0][1] = localize(dialogBundle,"States.severe");
	  data4[1][1] = localize(dialogBundle,"States.moderate");
	  data4[2][1] = localize(dialogBundle,"States.mild");
	  data4[3][1] = localize(dialogBundle,"States.absent");

	  data5[0][1] = localize(dialogBundle,"States.high");
	  data5[1][1] = localize(dialogBundle,"States.medium");
	  data5[2][1] = localize(dialogBundle,"States.low");
          
          switch (((Network) bayesNet).getFSDefaultStates(0).size()) {
            case 2: if (isPredefinedValue(data, ((Network) bayesNet).getFSDefaultStates(0)))
                     defaultStatesComboBox.setSelectedIndex(0);
                  else if (isPredefinedValue (data2, ((Network) bayesNet).getFSDefaultStates(0)))
                     defaultStatesComboBox.setSelectedIndex(1);
                  else if (isPredefinedValue (data3, ((Network) bayesNet).getFSDefaultStates(0)))
                     defaultStatesComboBox.setSelectedIndex(2);
                  else
                     defaultStatesComboBox.setSelectedIndex(5);
                  break;
            case 3: if (isPredefinedValue (data5, ((Network) bayesNet).getFSDefaultStates(0)))
                     defaultStatesComboBox.setSelectedIndex(4);
                  else
                     defaultStatesComboBox.setSelectedIndex(5);
                  break;
            case 4: if (isPredefinedValue (data4, ((Network) bayesNet).getFSDefaultStates(0)))
                     defaultStatesComboBox.setSelectedIndex(3);
                  else
                     defaultStatesComboBox.setSelectedIndex(5);
                  break;
            default: defaultStatesComboBox.setSelectedIndex(5);
          }
        }

        
       /**
	 * Returns True if the states vector has the same values that
	 * the object data. If this happens, the valuesComboBox must
	 * contain a value different from 'Others'.
	 *
	 * @param data Contains a set of predefinied values
	 * @param states States of the current node
	 */

	private boolean isPredefinedValue (Object[][] data, Vector states) {
	   int i=0;

	   // If has different size no more comparisons must be done
	   if (states.size()!=data.length)
	      return false;

	   //
	   while (i<data.length){
	      if (!states.contains(data[i][1]))
	         return false;
	      i++;
	   }
	   return true;
	}

	/**
	 * Stores the information displayed in the dialog into the
	 * network structure. This method generates changes in the network
	 * loaded, so it set the modifiedNetwork property of the EditorPanel
	 * to true
	 */

        public void getInformationFromDialog () {

            Class<? extends Bnet> classBnet = bayesNet.getClass();
			if ((iDiagramRadioButton.isSelected()) && (classBnet != IDWithSVNodes.class)) {
             
              if (!newNetwork) {
                if (!(classBnet == IDWithSVNodes.class)) {
				  IDWithSVNodes tmp = new IDWithSVNodes();
                  tmp.setAuthor(bayesNet.getAuthor());
                  tmp.setComment(bayesNet.getComment());
                  tmp.setLinkList(bayesNet.getLinkList());
                  tmp.setName(bayesNet.getName());
                  tmp.setNodeList(bayesNet.getNodeList());
                  tmp.setRelationList(bayesNet.getRelationList());
                  tmp.setTitle(bayesNet.getTitle());
                  tmp.setVersion(bayesNet.getVersion());
                  tmp.setVisualPrecision(bayesNet.getVisualPrecision());
                  Elvira.getElviraFrame().getCurrentEditorPanel().setBayesNet((IDiagram) tmp);
                  Elvira.getElviraFrame().showIDiagramOptions();
                }
              }
              else{
                bayesNet = new IDWithSVNodes();
              }
            }
            else if ((bNetRadioButton.isSelected()) && (classBnet != Bnet.class)) {
              if (!newNetwork) {
                if (!(bayesNet.getClass() == Bnet.class)) {
                  Bnet tmp = new Bnet();
                  Vector toRemove = new Vector();
                  for (int i=0; i<bayesNet.getNodeList().size(); i++) {
                  	int kindOfNode;
                  	kindOfNode=((Node) bayesNet.getNodeList().elementAt(i)).getKindOfNode();
                    if ((kindOfNode==Node.DECISION)
                     ||(kindOfNode==Node.UTILITY)
                     || (kindOfNode==Node.SUPER_VALUE))
                    {
                      toRemove.addElement(((Node) bayesNet.getNodeList().elementAt(i)).getName());
                    }
                  }
                  for (int i=0; i<toRemove.size(); i++) {
                      LinkList ll = ((Node) bayesNet.getNode((String) toRemove.elementAt(i))).getParents();
                      for (int j=0; j<ll.size(); j++) {
                            Elvira.getElviraFrame().getCurrentEditorPanel().removeLink(ll.elementAt(j).getTail(),ll.elementAt(j).getHead());
                      }
                      ll = ((Node) bayesNet.getNode((String) toRemove.elementAt(i))).getChildren();
                      for (int j=0; j<ll.size(); j++) {
                            Elvira.getElviraFrame().getCurrentEditorPanel().removeLink(ll.elementAt(j).getTail(),ll.elementAt(j).getHead());
                      }
                      Elvira.getElviraFrame().getCurrentEditorPanel().removeNodeFromNetwork(bayesNet.getNode((String) toRemove.elementAt(i)));
                  }
                  tmp.setAuthor(bayesNet.getAuthor());
                  tmp.setAuthor(bayesNet.getAuthor());
                  tmp.setComment(bayesNet.getComment());
                  tmp.setLinkList(bayesNet.getLinkList());
                  tmp.setName(bayesNet.getName());
                  tmp.setNodeList(bayesNet.getNodeList());
                  tmp.setRelationList(bayesNet.getRelationList());
                  tmp.setTitle(bayesNet.getTitle());
                  tmp.setVersion(bayesNet.getVersion());
                  tmp.setVisualPrecision(bayesNet.getVisualPrecision());
                  Elvira.getElviraFrame().getCurrentEditorPanel().setBayesNet((Bnet) tmp);
                  Elvira.getElviraFrame().getCurrentEditorPanel().repaint();
                  Elvira.getElviraFrame().hideIDiagramOptions();
                }
              }
              else
                bayesNet = new Bnet();
            }
            else if ((danRadioButton.isSelected())&&(classBnet!=Dan.class)){
            	if (!newNetwork){
            	 Dan tmp = new Dan();
                 tmp.setAuthor(bayesNet.getAuthor());
                 tmp.setComment(bayesNet.getComment());
                 tmp.setLinkList(bayesNet.getLinkList());
                 tmp.setName(bayesNet.getName());
                 tmp.setNodeList(bayesNet.getNodeList());
                 tmp.setRelationList(bayesNet.getRelationList());
                 tmp.setTitle(bayesNet.getTitle());
                 tmp.setVersion(bayesNet.getVersion());
                 tmp.setVisualPrecision(bayesNet.getVisualPrecision());
                 Elvira.getElviraFrame().getCurrentEditorPanel().setBayesNet((Dan) tmp);
                 Elvira.getElviraFrame().showDanOptions();
            	}
            	else{
            		bayesNet = new Dan();
            	}
            }
            else if ((uidRadioButton.isSelected())&&(classBnet!=UID.class)){
            	if (!newNetwork){
               	 UID tmp = new UID();
                    tmp.setAuthor(bayesNet.getAuthor());
                    tmp.setComment(bayesNet.getComment());
                    tmp.setLinkList(bayesNet.getLinkList());
                    tmp.setName(bayesNet.getName());
                    tmp.setNodeList(bayesNet.getNodeList());
                    tmp.setRelationList(bayesNet.getRelationList());
                    tmp.setTitle(bayesNet.getTitle());
                    tmp.setVersion(bayesNet.getVersion());
                    tmp.setVisualPrecision(bayesNet.getVisualPrecision());
                    Elvira.getElviraFrame().getCurrentEditorPanel().setBayesNet((UID) tmp);
                    Elvira.getElviraFrame().showUIDOptions();
               	}
               	else{
               		bayesNet = new UID();
               	}
            	
            	
            }

            bayesNet.setName(nameTextField.getText());
            bayesNet.setTitle(titleTextField.getText());
            bayesNet.setAuthor(authorTextField.getText());
            bayesNet.setComment(commentTextArea.getText());
            bayesNet.setWhenChanged(whenChangedTextField.getText());
            bayesNet.setWhoChanged(whoChangedTextField.getText());
            try {
              bayesNet.setVersion(Float.valueOf(versionTextField.getText()));
            } catch (NumberFormatException e) {
              ShowMessages.showMessageDialog(
                  ShowMessages.WRONG_VERSION, JOptionPane.ERROR_MESSAGE);
            }
            
            if ((!newNetwork) && (!bayesNet.getName().equals(""))) {
                Elvira.getElviraFrame().getCurrentNetworkFrame().setTitle(bayesNet.getName());
            }
        }


        /**
         * Manage the actions produce in the NetworkPropertiesDialog
         */

        class NSymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == cancelButton)
				cancelButton_actionPerformed(event);
			else if (object == okButton)
				cancelButton_actionPerformed(event);
                        else if (object == TabbedPane)
                                cancelButton_actionPerformed(event);
                        else if (object == definitionPanel)
                                cancelButton_actionPerformed(event);
                        else if (object == networkTypePanel)
                                cancelButton_actionPerformed(event);
                        else if (object == variablesTypePanel)
                                cancelButton_actionPerformed(event);
                        else if (object == infoPanel)
                                cancelButton_actionPerformed(event);
                        else if (object == defaultsPanel)
                                cancelButton_actionPerformed(event);
		}
	}
        
         class SymItem implements java.awt.event.ItemListener
	{

	   /**
	    * Manage the change of state in the valuesComboBox
	    */

		public void itemStateChanged(java.awt.event.ItemEvent event)
		{
			Object object = event.getSource();
			if (object == defaultStatesComboBox)
                            defaultStatesComboBox_itemStateChanged(event);
                }
                
        }
        
	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == cancelButton)
				cancelButton_actionPerformed(event);
			else if (object == okButton)
				okButton_actionPerformed(event);
		}
	}

	void cancelButton_actionPerformed(java.awt.event.ActionEvent event)
	{
          if (newNetwork)
            cancel = true;
          setVisible(false);
	}


	void okButton_actionPerformed(java.awt.event.ActionEvent event)
	{
            getInformationFromDialog();
            setVisible(false);
	}

        void defaultStatesComboBox_itemStateChanged(java.awt.event.ItemEvent event)
	{
            switch (defaultStatesComboBox.getSelectedIndex()) {
                case 0: setNewDefaultStates(data); break;
		case 1: setNewDefaultStates(data2); break;
		case 2: setNewDefaultStates(data3); break;
		case 3: setNewDefaultStates(data4); break;
		case 4: setNewDefaultStates(data5); break;
            }
	}

        void setNewDefaultStates(Object[][] theData) {
            Vector theNewStates = new Vector();
            
            for (int i=0; i<theData.length; i++) {
                theNewStates.add(theData[i][1]);
            }
            
            ((Network) bayesNet).setFSDefaultStates(theNewStates);
        }
}
