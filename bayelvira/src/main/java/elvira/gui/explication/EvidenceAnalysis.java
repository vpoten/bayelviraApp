/*
 * EvidenceAnalysis.java
 *
 * Created on 13 de octubre de 2002, 23:12
 */

package elvira.gui.explication;

import java.text.*;
import elvira.Elvira;
import elvira.*;
import java.util.*;

/**
 * This class draws a window with four panels, each one corresponding to 
 * the classification of the findings of the evidence of a certain case depending 
 * on the kind of influence (positive, negative, null or unknown) exerted 
 * over a variable of interest. 
 */

/**
 *
 * @author  Carmen Lacave
 */
public class EvidenceAnalysis extends javax.swing.JDialog {
    
    private Bnet bnet;

      /* The case that is going to be explained by the classification of findings*/ 
	private Case currentcase;
	
	/* The evidence of such case */
	private Evidence evi;
	
	/* The node that represents the variable of interest */ 
    private Node node;
    
    private ResourceBundle dialogBundle;
    
    /** Creates new form EvidenceAnalysis */
    public EvidenceAnalysis(Bnet b, Case ce, Evidence e, Node n) {
        switch (Elvira.getLanguaje()) {
		   case Elvira.AMERICAN: dialogBundle = ResourceBundle.getBundle ("elvira/localize/Explanation");
		                         break;
		   case Elvira.SPANISH: dialogBundle = ResourceBundle.getBundle ("elvira/localize/Explanation_sp");
		                        break;
		}
        bnet=b;
        currentcase=ce;
        evi=e;
        node=n;
        setModal(true);
        initComponents();
        setSize(500,500);
        clasifyFindings();
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        texto = new javax.swing.JTextField();
        infposlabel = new javax.swing.JLabel();
        infneglabel = new javax.swing.JLabel();
        infnullabel = new javax.swing.JLabel();
        infunklabel = new javax.swing.JLabel();
        infposcroll = new javax.swing.JScrollPane();
        infpostext = new javax.swing.JTextArea();
        infnegscroll = new javax.swing.JScrollPane();
        infnegtext = new javax.swing.JTextArea();
        infnulscroll = new javax.swing.JScrollPane();
        infnultext = new javax.swing.JTextArea();
        infunkscroll = new javax.swing.JScrollPane();
        infunktext = new javax.swing.JTextArea();
        okbutton = new javax.swing.JButton();

        getContentPane().setLayout(null);

        setTitle(Elvira.localize(dialogBundle, "title"));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        texto.setEditable(false);
        texto.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        texto.setFont(new java.awt.Font("Arial", 1, 14));
        texto.setText(Elvira.localize(dialogBundle, "findings")+" "+node.getTitle());
        texto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textoActionPerformed(evt);
            }
        });

        getContentPane().add(texto);
        texto.setBounds(0, 0, 500, 30);

        infposlabel.setFont(new java.awt.Font("Arial", 3, 14));
        infposlabel.setText(Elvira.localize(dialogBundle, "positive"));
        getContentPane().add(infposlabel);
        infposlabel.setBounds(10, 30, 180, 30);

        infneglabel.setFont(new java.awt.Font("Arial", 3, 14));
        infneglabel.setText(Elvira.localize(dialogBundle, "negative"));
        getContentPane().add(infneglabel);
        infneglabel.setBounds(250, 30, 180, 30);

        infnullabel.setFont(new java.awt.Font("Arial", 3, 14));
        infnullabel.setText(Elvira.localize(dialogBundle, "null"));
        getContentPane().add(infnullabel);
        infnullabel.setBounds(10, 190, 180, 30);

        infunklabel.setFont(new java.awt.Font("Arial", 3, 14));
        infunklabel.setText(Elvira.localize(dialogBundle, "unknown"));
        getContentPane().add(infunklabel);
        infunklabel.setBounds(250, 190, 180, 30);

        infpostext.setText(posfindings.toString());
        infposcroll.setViewportView(infpostext);

        getContentPane().add(infposcroll);
        infposcroll.setBounds(10, 60, 220, 130);

        infnegtext.setText(negfindings.toString());
        infnegscroll.setViewportView(infnegtext);

        getContentPane().add(infnegscroll);
        infnegscroll.setBounds(250, 60, 220, 130);

        infnultext.setText(nulfindings.toString());
        infnulscroll.setViewportView(infnultext);

        getContentPane().add(infnulscroll);
        infnulscroll.setBounds(10, 220, 220, 130);

        infunktext.setText(unkfindings.toString());
        infunkscroll.setViewportView(infunktext);

        getContentPane().add(infunkscroll);
        infunkscroll.setBounds(250, 220, 220, 130);

        okbutton.setText("OK");
        okbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okbuttonActionPerformed(evt);
            }
        });

        getContentPane().add(okbutton);
        okbutton.setBounds(210, 380, 80, 26);

        pack();
    }//GEN-END:initComponents

    private void okbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okbuttonActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_okbuttonActionPerformed

    private void textoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textoActionPerformed
    }//GEN-LAST:event_textoActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea infnegtext;
    private javax.swing.JScrollPane infposcroll;
    private javax.swing.JTextField texto;
    private javax.swing.JTextArea infpostext;
    private javax.swing.JScrollPane infnegscroll;
    private javax.swing.JTextArea infnultext;
    private javax.swing.JScrollPane infnulscroll;
    private javax.swing.JTextArea infunktext;
    private javax.swing.JScrollPane infunkscroll;
    private javax.swing.JButton okbutton;
    private javax.swing.JLabel infneglabel;
    private javax.swing.JLabel infposlabel;
    private javax.swing.JLabel infnullabel;
    private javax.swing.JLabel infunklabel;
        // End of variables declaration//GEN-END:variables
 
 /* These vectors will contain the sets of findings which have, 
  * respectively, a positive, or negative or null or unknown influence   
  * on a 
  */
  private Vector posfindings=new Vector();
  private Vector negfindings=new Vector();
  private Vector nulfindings=new Vector();
  private Vector unkfindings=new Vector();
    
  /* This method classifies the findings */
   void clasifyFindings(){
       double[] distnode=macroExplanation.greaterdist(currentcase, node);
       for (int d=0; d<distnode.length; d++)
       	System.out.print(distnode[d]+" ");
       System.out.println();	
       for (int e=0; e<evi.getVariables().size(); e++){
           Node finding=evi.getVariable(0);
           int valuef=evi.getValue(evi.getVariable(0));
           Evidence fe=evi;
       	System.out.println(finding.getTitle());
       	   fe.remove(fe.indexOf(finding.getName()));
           fe.print();
           Case casefinde=new Case(bnet,fe);
           casefinde.propagate();
           double[] distfinding=macroExplanation.greaterdist(casefinde, node); 
           for (int d=0; d<distfinding.length; d++)
           System.out.print(distfinding[d]+" ");
           System.out.println();	
           int rescom=macroExplanation.compare(distnode, distfinding);
           fe.putValue((FiniteStates) finding, valuef);
           if (rescom==0){
               negfindings.add(new FindMes(finding, valuef, macroExplanation.influences(distnode,distfinding)));
              }
           else if (rescom==1){
               posfindings.add(new FindMes(finding, valuef, macroExplanation.influences(distfinding,distnode)));
              }
           else if (rescom==2){
               nulfindings.add(new FindMes(finding, valuef, macroExplanation.influences(distnode,distfinding)));
              }
           else{
               unkfindings.add(new FindMes(finding, valuef, macroExplanation.influences(distfinding,distnode)));
              }
           
   }
    String posf=new String();
    infpostext.setText(posfindings.toString());
    infnegtext.setText(negfindings.toString());
    infnultext.setText(nulfindings.toString());
    infunktext.setText(unkfindings.toString());
 }

 class FindMes{
 	Node f;
 	int st;
 	double m;
 	FindMes(Node n, int s, double d){
 		f=n;
 		st=s;
		DecimalFormatSymbols dfs=new DecimalFormatSymbols();
		dfs.setDecimalSeparator('.');
		NumberFormat nf=new DecimalFormat(Elvira.getElviraFrame().getVisualPrecision(),dfs);
		m=Double.parseDouble(String.valueOf(nf.format(d)));
 	}
 	
 	public String toString(){
 		return "\n"+f.toString()+"= "+((FiniteStates) f).getState(st)+" --> "+m;
 	}
 }//end class FindMes
}