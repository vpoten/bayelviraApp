/* Generated By:JavaCC: Do not edit this line. XBif2ElvParseTokenManager.java */
package elvira.translator.xbif2elv;
import java.util.Vector;
import java.util.Enumeration;
import java.util.Hashtable;
import elvira.Node;
import elvira.NodeList;
import elvira.FiniteStates;
import elvira.Continuous;
import elvira.Configuration;
import elvira.Evidence;
import elvira.potential.*;
import elvira.Relation;
import elvira.Link;
import elvira.LinkList;
import elvira.Bnet;
import java.io.*;

public class XBif2ElvParseTokenManager implements XBif2ElvParseConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xa0L) != 0L)
         {
            jjmatchedKind = 30;
            return 82;
         }
         if ((active0 & 0xfffbe00L) != 0L)
            return 9;
         return -1;
      case 1:
         if ((active0 & 0x10000L) != 0L)
            return 51;
         if ((active0 & 0xa0L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 1;
            return 82;
         }
         if ((active0 & 0xaaaaa00L) != 0L)
         {
            jjmatchedKind = 1;
            jjmatchedPos = 1;
            return -1;
         }
         return -1;
      case 2:
         if ((active0 & 0xa0L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 2;
            return 82;
         }
         if ((active0 & 0x10000L) != 0L)
            return 50;
         if ((active0 & 0xaaaaa00L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 1;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0x80L) != 0L)
            return 82;
         if ((active0 & 0xaaaaa00L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 1;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 3;
            return 82;
         }
         return -1;
      case 4:
         if ((active0 & 0xaaaaa00L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 1;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 4;
            return 82;
         }
         return -1;
      case 5:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 5;
            return 82;
         }
         if ((active0 & 0xaaaaa00L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 1;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x20L) != 0L)
            return 82;
         if ((active0 & 0xa2aaa00L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 1;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0xa2a8800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 1;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x2a8800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 1;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x288800L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 1;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x288000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 1;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 1;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 1;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 60:
         return jjMoveStringLiteralDfa1_0(0xfffbe00L);
      case 61:
         return jjStopAtPos(0, 6);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x20L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0xaaaaa00L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1400L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4011000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2800L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x480000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x200080L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x100020L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x28000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x802a000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x4080200L);
      case 69:
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 82);
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x900000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x600000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x40020L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(4, 22);
         break;
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x8100000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x1041000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x220L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x4020000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x808000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(5, 12);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(5, 23);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x6092000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x420L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(6, 9);
         else if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(6, 13);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(6, 24);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(6, 26);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x208000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x8020000L);
      case 78:
      case 110:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 5, 82);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x80400L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(7, 16);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(7, 25);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(7, 27);
         break;
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x208000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa8_0(active0, 0x400L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(8, 10);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(8, 17);
         break;
      case 68:
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x108000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(9, 11);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(9, 18);
         break;
      case 68:
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(10, 15);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(10, 19);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(12, 20);
         break;
      case 89:
      case 121:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(13, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 82;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 47)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  break;
               case 82:
                  if ((0x87ff6cfafffff9ffL & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAdd(7);
                  }
                  if ((0x87ff6cfafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 0:
                  if ((0x87ff6cfafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  else if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 47)
                     jjAddStates(3, 4);
                  else if (curChar == 60)
                     jjAddStates(5, 8);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAddStates(9, 14);
                  }
                  else if ((0x4000000100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if ((0x87ff6cfafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 7:
                  if ((0x87ff6cfafffff9ffL & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if (curChar == 60)
                     jjAddStates(5, 8);
                  break;
               case 10:
                  if (curChar == 45)
                     jjCheckNAddStates(18, 20);
                  break;
               case 11:
                  if ((0xffffdfffffffffffL & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 12:
                  if (curChar == 45)
                     jjCheckNAdd(11);
                  break;
               case 13:
                  if (curChar == 62 && kind > 4)
                     kind = 4;
                  break;
               case 14:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 17:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 20:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 22:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 23:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if (curChar == 62 && kind > 8)
                     kind = 8;
                  break;
               case 35:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 37:
                  if (curChar == 61)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 39:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 40:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(38, 41);
                  break;
               case 41:
                  if (curChar == 62 && kind > 14)
                     kind = 14;
                  break;
               case 53:
                  if (curChar == 47)
                     jjAddStates(3, 4);
                  break;
               case 54:
                  if (curChar == 47)
                     jjCheckNAddStates(21, 23);
                  break;
               case 55:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 56:
               case 57:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 58:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 60:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 61:
                  if (curChar == 42)
                     jjAddStates(24, 25);
                  break;
               case 62:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(63, 61);
                  break;
               case 63:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(63, 61);
                  break;
               case 64:
                  if (curChar == 47 && kind > 3)
                     kind = 3;
                  break;
               case 65:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 67:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(68, 69);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  break;
               case 70:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(71);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(71);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(72, 73);
                  break;
               case 73:
                  if (curChar != 46)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(74);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(74);
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAddStates(9, 14);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(76);
                  break;
               case 77:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(78, 79);
                  break;
               case 79:
                  if (curChar == 34 && kind > 33)
                     kind = 33;
                  break;
               case 80:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(80, 81);
                  break;
               case 81:
                  if (curChar == 34 && kind > 34)
                     kind = 34;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  else if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 82:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAdd(7);
                  }
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAdd(7);
                  }
                  break;
               case 0:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAdd(7);
                  }
                  break;
               case 5:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0xc7ffffffd7ffffffL & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAdd(7);
                  break;
               case 11:
                  jjAddStates(18, 20);
                  break;
               case 19:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  jjAddStates(29, 30);
                  break;
               case 25:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 26:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 32:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 36:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  jjAddStates(31, 32);
                  break;
               case 42:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 43:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 46:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 55:
                  jjAddStates(21, 23);
                  break;
               case 60:
                  jjCheckNAddTwoStates(60, 61);
                  break;
               case 62:
               case 63:
                  jjCheckNAddTwoStates(63, 61);
                  break;
               case 69:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 80:
                  jjAddStates(33, 34);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 82:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAdd(7);
                  }
                  break;
               case 0:
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 7:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAdd(7);
                  break;
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(18, 20);
                  break;
               case 22:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(29, 30);
                  break;
               case 39:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(31, 32);
                  break;
               case 55:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(21, 23);
                  break;
               case 60:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 62:
               case 63:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(63, 61);
                  break;
               case 80:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(33, 34);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 82 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   78, 80, 81, 54, 59, 9, 17, 34, 52, 66, 67, 69, 72, 73, 76, 66, 
   72, 3, 11, 12, 15, 55, 56, 58, 62, 64, 66, 67, 69, 22, 23, 39, 
   40, 80, 81, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\75", null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xe7fffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[82];
private final int[] jjstateSet = new int[164];
protected char curChar;
public XBif2ElvParseTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public XBif2ElvParseTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 82; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
