/* Generated By:JavaCC: Do not edit this line. XBif2ElvParse.java */
package elvira.translator.xbif2elv;

import java.util.Vector;
import java.util.Enumeration;
import java.util.Hashtable;
import elvira.Node;
import elvira.NodeList;
import elvira.FiniteStates;
import elvira.Continuous;
import elvira.Configuration;
import elvira.Evidence;
import elvira.potential.*;
import elvira.Relation;
import elvira.Link;
import elvira.LinkList;
import elvira.Bnet;
import java.io.*;

public class XBif2ElvParse implements XBif2ElvParseConstants {
   public String Type;
   public String Name;
   public String Title;
   public String Comment;
   public String Author;
   public String WhoChanged;
   public String WhenChanged;
   public String version;
   public boolean locked;
   public Hashtable NodeDefaultProperties;
   public Hashtable RelationDefaultProperties;
   public Vector Consistency;
   public NodeList Nodes;
   public LinkList Links;
   public Vector Relations;
   public FiniteStates DefaultFinite;
   public Continuous DefaultContinuous;
   public Relation DefaultRelation;
   public Link DefaultLink;
   public int defaultnodetype;
   public boolean statesdecl;
   public Evidence ConfigEvidence;

   public static void main(String args[]) throws ParseException,IOException {

      Bnet b;
      FileInputStream networkFile;
      FileWriter networkOutputFile;

      if (args.length<2)
         System.out.println("Too few arguments. Arguments are: XBifFile ElviraNetworkFile");
      else {
         networkFile = new FileInputStream(args[0]);
         XBif2ElvParse parser = new XBif2ElvParse(networkFile);
         parser.initialize();
         parser.CompilationUnit();
         b=new Bnet();
         b.translate(parser);
         networkOutputFile= new FileWriter(args[1]);
         b.saveBnet(networkOutputFile);
         //The name of the evidende file will be: <network_name> + ".evi"
         parser.saveEvidence(args[1]);
      }
   }

   public void initialize() {

      String DefaultStates[]= {"absent","present"};
      Name =  new String("");
      Title =  new String("");
      Comment =  new String("");
      Author =  new String("");
      WhoChanged =  new String("");
      WhenChanged =  new String("");
      version =  new String("1.0");
      Consistency = new Vector();
      Nodes = new NodeList();
      Links = new LinkList();
      Relations = new Vector();
      DefaultFinite = new FiniteStates("Default",DefaultStates);
      DefaultContinuous = new Continuous();
      DefaultContinuous.setTitle("");
      DefaultContinuous.setComment("");
      DefaultRelation = new Relation();
      DefaultRelation.setKind(Relation.CONDITIONAL_PROB);
      DefaultFinite.setTitle("");
      DefaultFinite.setComment("");
      DefaultLink = new Link(true);
      defaultnodetype=1;
      Type=new String("xbif");
      ConfigEvidence= new Evidence();
   }

  final public void CompilationUnit() throws ParseException {
 Token t;
    xbifDeclaration();
    jj_consume_token(0);
  }

  final public void xbifDeclaration() throws ParseException {
    jj_consume_token(XBIF);
    networkDeclaration();
    jj_consume_token(XBIF_END);
  }

  final public void networkDeclaration() throws ParseException {
 Token T;
    jj_consume_token(NETWORK);
    jj_consume_token(NAME);
    label_1:
    while (true) {
      T = jj_consume_token(WORD);
      if (jj_2_1(4)) {
        ;
      } else {
        break label_1;
      }
    }
    jj_consume_token(NAME_END);
       Name = new String(T.image);
    label_2:
    while (true) {
      variableDeclaration();
      if (jj_2_2(4)) {
        ;
      } else {
        break label_2;
      }
    }
    label_3:
    while (true) {
      probabilityDeclaration();
      if (jj_2_3(4)) {
        ;
      } else {
        break label_3;
      }
    }
    jj_consume_token(NETWORK_END);
  }

  final public void variableDeclaration() throws ParseException {
   Token T;
   Node N=null;
   Token numStates;
   int observedState=0;
    jj_consume_token(VARIABLE);
    jj_consume_token(NAME);
    label_4:
    while (true) {
      T = jj_consume_token(WORD);
      if (jj_2_4(4)) {
        ;
      } else {
        break label_4;
      }
    }
    jj_consume_token(NAME_END);
    jj_consume_token(VALUES);
    numStates = jj_consume_token(DECIMAL_LITERAL);
      int statesSize=new Integer(numStates.image.toString());
      String states[] = new String[statesSize];
      for (int i=0;i<statesSize;i++)
            states[i]="s"+i;
      N = new FiniteStates(T.image, states);
      Nodes.insertNode(N);
    jj_consume_token(VALUES_END);
    label_5:
    while (true) {
      if (jj_2_5(4)) {
        ;
      } else {
        break label_5;
      }
      observedState = observedDeclaration();
       ConfigEvidence.insert((FiniteStates)N,observedState);
    }
    jj_consume_token(VARIABLE_END);
  }

  final private int observedDeclaration() throws ParseException {
 Token T;
    jj_consume_token(OBSERVED);
    T = jj_consume_token(DECIMAL_LITERAL);
    jj_consume_token(OBSERVED_END);
    {if (true) return new Integer(T.image.toString()).intValue();}
    throw new Error("Missing return statement in function");
  }

  final public void probabilityDeclaration() throws ParseException {
   Token child,parent, prob;
   Relation R;
   Vector nameR=new Vector();
   int i=0;
    jj_consume_token(PROBABILITY);
    R = DefaultRelation.copy();
    jj_consume_token(FOR);
    child = jj_consume_token(WORD);
    jj_consume_token(FOR_END);
       nameR.addElement(child.toString());
    label_6:
    while (true) {
      if (jj_2_6(4)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(GIVEN);
      parent = jj_consume_token(WORD);
      nameR.addElement(parent.toString());
      Link L=null;
      L = new Link(true);
      L.setTail(Nodes.getNode((String)parent.image));
      L.setHead(Nodes.getNode((String)child.image));
      Links.insertLink(L);
      jj_consume_token(GIVEN_END);
    }
      R.setVariablesFromNames(nameR,Nodes);
      PotentialTable potTable = new PotentialTable(R.getVariables());
    jj_consume_token(TABLE);
      long size= potTable.getSize();
      double probs[] =new double[(int)size];
      int numrows=(int)size/((FiniteStates)Nodes.getNode((String)child.image)).getNumStates();
      int numcols=((FiniteStates)Nodes.getNode((String)child.image)).getNumStates();;
    label_7:
    while (true) {
      if (jj_2_7(4)) {
        prob = jj_consume_token(FLOAT);
      } else if (jj_2_8(4)) {
        prob = jj_consume_token(FLOATSCI);
      probs[i/numcols+(numrows*(i%numcols))]=new Double(prob.image.toString()).doubleValue();
      i++;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_9(4)) {
        ;
      } else {
        break label_7;
      }
    }
    jj_consume_token(TABLE_END);
      potTable.setValues(probs);
      R.setValues(potTable);
      Relations.addElement(R);
    jj_consume_token(PROBABILITY_END);
  }

  final public void saveEvidence(String nameFile) throws ParseException {
   Evidence evid;
   FileWriter evidenceFile;
      evid=new Evidence(ConfigEvidence);
      evid.setName(Name);
      evid.setTitle(Name);
      try{
         evidenceFile = new FileWriter(nameFile +".evi");
         evid.save(evidenceFile);
         evidenceFile.close();
      }
      catch(Exception e){System.out.println("Problems saving the evidence");}
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_3R_9() {
    if (jj_scan_token(PROBABILITY)) return true;
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(WORD)) return true;
    if (jj_scan_token(FOR_END)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(FLOATSCI)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_scan_token(OBSERVED)) return true;
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    if (jj_scan_token(OBSERVED_END)) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(NAME)) return true;
    Token xsp;
    if (jj_3_4()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(NAME_END)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(GIVEN)) return true;
    if (jj_scan_token(WORD)) return true;
    if (jj_scan_token(GIVEN_END)) return true;
    return false;
  }

  final private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_10()) return true;
    return false;
  }

  public XBif2ElvParseTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[9];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public XBif2ElvParse(java.io.InputStream stream) {
     this(stream, null);
  }
  public XBif2ElvParse(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new XBif2ElvParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public XBif2ElvParse(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new XBif2ElvParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public XBif2ElvParse(XBif2ElvParseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(XBif2ElvParseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[36];
    for (int i = 0; i < 36; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 36; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 9; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
