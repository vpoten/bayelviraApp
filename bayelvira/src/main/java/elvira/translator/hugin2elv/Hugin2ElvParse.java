/* Generated By:JavaCC: Do not edit this line. Hugin2ElvParse.java */
package elvira.translator.hugin2elv;

import java.util.Vector;
import java.util.Enumeration;
import java.util.Hashtable;
import elvira.Node;
import elvira.NodeList;
import elvira.FiniteStates;
import elvira.Continuous;
import elvira.Configuration;
import elvira.potential.*;
import elvira.Relation;
import elvira.Link;
import elvira.LinkList;
import elvira.Bnet;
import elvira.IDiagram;
import java.io.*;


public class Hugin2ElvParse implements Hugin2ElvParseConstants {
 public String Type;
 public String Name;
 public String Title;
 public String Comment;
 public String Author;
 public String WhoChanged;
 public String WhenChanged;
 public String version;
 public boolean locked;
 public Hashtable networkPropertyList;
 public Hashtable NodeDefaultProperties;
 public Hashtable RelationDefaultProperties;
 public Vector Consistency;
 public NodeList Nodes;
 public LinkList Links;
 public Vector Relations;
 public FiniteStates DefaultFinite;
 public Continuous DefaultContinuous;
 public Relation DefaultRelation;
 public Link DefaultLink;
 public int defaultnodetype;
 public boolean statesdecl;
 boolean isID=false;





  public static void main(String args[]) throws ParseException
   ,IOException {
   Bnet b;
   FileInputStream networkFile;
   FileWriter networkOutputFile;

   if (args.length<2)
     System.out.println("Too few arguments. Arguments are: HuginFile ElviraFile");
   else {
     networkFile = new FileInputStream(args[0]);
     Hugin2ElvParse parser = new Hugin2ElvParse(networkFile);
     parser.initialize();

     parser.CompilationUnit();
     if(parser.isID){
       b=new IDiagram();
     }
     else{
       b=new Bnet();
     }
     b.translate(parser);
     networkOutputFile= new FileWriter(args[1]);
     b.saveBnet(networkOutputFile);
     networkOutputFile.close();
   }
  }

  public void initialize() {
    String DefaultStates[]= {"absent","present"};

   Name =  new String("");
   Title =  new String("");
   Comment =  new String("");
   Author =  new String("");
   WhoChanged =  new String("");
   WhenChanged =  new String("");
   version =  new String("1.0");
   networkPropertyList=new Hashtable();

   Consistency = new Vector();
    Nodes = new NodeList();
    Links = new LinkList();
    Relations = new Vector();
    DefaultFinite = new FiniteStates("Default",DefaultStates);
    DefaultContinuous = new Continuous();
    DefaultContinuous.setTitle("");
    DefaultContinuous.setComment("");
    DefaultRelation = new Relation();
    DefaultRelation.setKind(Relation.CONDITIONAL_PROB);
    DefaultFinite.setTitle("");
    DefaultFinite.setComment("");
    DefaultLink = new Link(true);

     defaultnodetype=1;
 }

  final public void CompilationUnit() throws ParseException {
    label_1:
    while (true) {
      if (jj_2_1(4)) {
        ;
      } else {
        break label_1;
      }
      ElementDeclaration();
      if (jj_2_2(4)) {
        jj_consume_token(30);
      } else {
        ;
      }
    }
    jj_consume_token(0);
  }

  final public void ElementDeclaration() throws ParseException {
    if (jj_2_3(4)) {
      NetworkDeclaration();
    } else if (jj_2_4(4)) {
      NodeDeclaration();
    } else if (jj_2_5(4)) {
      ProbabilityDeclaration();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NetworkDeclaration() throws ParseException {
 Token T;
    jj_consume_token(NETWORK);
    Name = "Unknown";
    jj_consume_token(31);
    NetworkContent();
    jj_consume_token(32);
  }

  final public void NetworkContent() throws ParseException {
    label_2:
    while (true) {
      if (jj_2_6(4)) {
        ;
      } else {
        break label_2;
      }
      NetworkProperty();
      jj_consume_token(30);
    }
  }

  final public void NetworkProperty() throws ParseException {
 Token NProp,VProp;
    if (jj_2_9(4)) {
      jj_consume_token(NODE_SIZE);
      jj_consume_token(EQUAL);
      jj_consume_token(OPEN_PAREN);
      jj_consume_token(DECIMAL_LITERAL);
      jj_consume_token(DECIMAL_LITERAL);
      jj_consume_token(CLOSE_PAREN);
    } else if (jj_2_10(4)) {
      jj_consume_token(LABEL);
      jj_consume_token(EQUAL);
      jj_consume_token(STRING);
    } else if (jj_2_11(4)) {
      jj_consume_token(NAME);
      jj_consume_token(EQUAL);
      jj_consume_token(STRING);
    } else if (jj_2_12(4)) {
      NProp = jj_consume_token(WORD);
      jj_consume_token(EQUAL);
      if (jj_2_7(4)) {
        VProp = jj_consume_token(STRING);
      } else if (jj_2_8(4)) {
        VProp = jj_consume_token(STRINGDECIMAL);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      networkPropertyList.put(NProp.image,VProp.image);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NodeDeclaration() throws ParseException {
 Token T,K;
    if (jj_2_13(4)) {
      K = jj_consume_token(NODE);
    } else if (jj_2_14(4)) {
      K = jj_consume_token(UTILITY);
                              isID=true;
    } else if (jj_2_15(4)) {
      K = jj_consume_token(DECISION);
                                                             isID=true;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    T = jj_consume_token(WORD);
    FiniteBody(T,K);
  }

  final public void FiniteBody(Token T,Token K) throws ParseException {
//FiniteStates N;
Node N=null;
if((K.image=="node") || (K.image=="decision")){
  N= (FiniteStates) DefaultFinite.copy();
  if(K.image=="decision"){
    N.setKindOfNode(Node.DECISION);
  }
}
else if(K.image=="utility"){
  N= (Continuous) DefaultContinuous.copy();
  N.setKindOfNode(Node.UTILITY);
}
N.setName(T.image);
    jj_consume_token(31);
    NodeProperties(N);
    jj_consume_token(32);
                               Nodes.insertNode(N);
  }

  final public void NodeProperties(Node M) throws ParseException {
    label_3:
    while (true) {
      if (jj_2_16(4)) {
        ;
      } else {
        break label_3;
      }
      NodeProperty(M);
      jj_consume_token(30);
    }
  }

  final public void NodeProperty(Node N) throws ParseException {
 Token T,NProp,VProp;
 Vector V;
    if (jj_2_19(4)) {
      jj_consume_token(LABEL);
      jj_consume_token(EQUAL);
      T = jj_consume_token(STRING);
      N.setTitle(T.image.substring(1,T.image.length()-1));
    } else if (jj_2_20(4)) {
      jj_consume_token(POSITION);
      jj_consume_token(EQUAL);
      jj_consume_token(OPEN_PAREN);
      T = jj_consume_token(DECIMAL_LITERAL);
      N.setPosX( Integer.valueOf(T.image).intValue() );
      T = jj_consume_token(DECIMAL_LITERAL);
      N.setPosY( Integer.valueOf(T.image).intValue() );
      jj_consume_token(CLOSE_PAREN);
    } else if (jj_2_21(4)) {
      jj_consume_token(STATES);
      jj_consume_token(EQUAL);
                    V= new Vector();
      jj_consume_token(OPEN_PAREN);
      ListWords(V);
      jj_consume_token(CLOSE_PAREN);
      ((FiniteStates)N).setStates(V);
    } else if (jj_2_22(4)) {
      NProp = jj_consume_token(WORD);
      jj_consume_token(EQUAL);
      if (jj_2_17(4)) {
        VProp = jj_consume_token(STRING);
      } else if (jj_2_18(4)) {
        VProp = jj_consume_token(STRINGDECIMAL);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      N.putProperty(NProp.image,VProp.image);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ProbabilityDeclaration() throws ParseException {
  Vector C;
 Relation R;
 Token T;
    jj_consume_token(POTENTIAL);
       R = DefaultRelation.copy();
       C = new Vector();
    jj_consume_token(OPEN_PAREN);
    T = jj_consume_token(WORD);
      C.addElement(T.toString());
    if (jj_2_23(4)) {
      jj_consume_token(BAR);
    } else {
      ;
    }
    if (jj_2_24(4)) {
      ListWords(C);
       int i;
       Link K=null;
       for(i=1;i<C.size();i++) {
         K = new Link(true);
         K.setTail (Nodes.getNode((String)(C.elementAt(i))));
         K.setHead (Nodes.getNode((String)(C.elementAt(0))));
         Links.insertLink(K);
       }
    } else {
      ;
    }
    jj_consume_token(CLOSE_PAREN);
       R.setVariablesFromNames(C,Nodes);
       if(R.getVariables().elementAt(0).getKindOfNode()==Node.UTILITY){
         R.setKind(Relation.UTILITY);
       }
    jj_consume_token(31);
    if (jj_2_25(4)) {
      RelationProperties(R);
    } else {
      ;
    }
    jj_consume_token(32);
       if(R.getVariables().elementAt(0).getKindOfNode()!=Node.DECISION){
         Relations.addElement(R);
       }
  }

  final public void RelationProperties(Relation R) throws ParseException {
    if (jj_2_27(4)) {
      label_4:
      while (true) {
        RelationProperty(R);
        if (jj_2_26(4)) {
          ;
        } else {
          break label_4;
        }
      }
    } else if (jj_2_28(4)) {
      jj_consume_token(30);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void RelationProperty(Relation R) throws ParseException {
 Token T;
 Potential pot;
    pot = TableDeclaration(R);
      R.setValues(pot);
  }

  final public PotentialTable TableDeclaration(Relation R) throws ParseException {
 PotentialTable T;
   T = new PotentialTable(R.chanceAndDecisionNodes());
   T.setValue(-1.0);
    jj_consume_token(DATA);
    jj_consume_token(EQUAL);
      int i;
      Configuration conf=new Configuration();
      for(i=1;i<T.getVariables().size();i++){
        conf.insert((FiniteStates)(T.getVariables().elementAt(i)),0);
      }
      conf.insert((FiniteStates)(T.getVariables().elementAt(0)),0);

      boolean normalize;
      if(R.getKind()!=Relation.UTILITY)
        normalize=true;
      else
        normalize=false;
    Assignment(T,conf,normalize);
    jj_consume_token(30);
     {if (true) return T;}
    throw new Error("Missing return statement in function");
  }

  final public void Assignment(PotentialTable Table,Configuration conf, boolean normalize) throws ParseException {
  Vector L;
    jj_consume_token(OPEN_PAREN);
    if (jj_2_30(4)) {
      label_5:
      while (true) {
        Assignment(Table,conf,normalize);
        if (jj_2_29(4)) {
          ;
        } else {
          break label_5;
        }
      }
    } else if (jj_2_31(4)) {
      ListFloatsConf(Table,conf,normalize);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CLOSE_PAREN);
  }

  final public void ListFloatsConf(PotentialTable Table,Configuration conf, boolean normalize) throws ParseException {
 Token T;
 Double D;
 double sum=0.0;
 int n=0,i;
 Vector L = new Vector();
    label_6:
    while (true) {
      if (jj_2_32(4)) {
        T = jj_consume_token(FLOAT);
      } else if (jj_2_33(4)) {
        T = jj_consume_token(FLOATSCI);
      } else if (jj_2_34(4)) {
        T = jj_consume_token(INTEGER);
      } else if (jj_2_35(4)) {
        T = jj_consume_token(DECIMAL_LITERAL);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    D= new Double(T.image);
    L.addElement(D);
    if ( normalize )
      sum+=D.doubleValue();
    n++;
      if (jj_2_36(4)) {
        ;
      } else {
        break label_6;
      }
    }
    for(i=0;i<n;i++){
      if ( normalize ) {
        Table.setValue(conf,((Double)(L.elementAt(i))).doubleValue()/sum);
      }
      else {
        Table.setValue(conf,((Double)(L.elementAt(i))).doubleValue());
      }
      conf.nextConfiguration();
    }
  }

  final public void ListWords(Vector C) throws ParseException {
 Token T;
    if (jj_2_40(4)) {
      if (jj_2_37(4)) {
        T = jj_consume_token(WORD);
      } else if (jj_2_38(4)) {
        T = jj_consume_token(DECIMAL_LITERAL);
      } else if (jj_2_39(4)) {
        T = jj_consume_token(STRING);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
          C.addElement(T.toString());
    } else if (jj_2_41(4)) {
      T = jj_consume_token(STRINGDECIMAL);
          C.addElement(T.image.substring(1,T.image.length()-1));
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_44(4)) {
      if (jj_2_42(4)) {
        jj_consume_token(COMMA);
        ListWords(C);
      } else if (jj_2_43(4)) {
        ListWords(C);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  final private boolean jj_3R_16() {
    if (jj_scan_token(OPEN_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) return true;
    }
    if (jj_scan_token(CLOSE_PAREN)) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_scan_token(POSITION)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(OPEN_PAREN)) return true;
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(LABEL)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(STRINGDECIMAL)) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_12()) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(31)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(32)) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_scan_token(30)) return true;
    return false;
  }

  final private boolean jj_3_43() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(UTILITY)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_scan_token(DATA)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(NODE)) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    }
    if (jj_scan_token(WORD)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3_38() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) return true;
    }
    return false;
  }

  final private boolean jj_3_27() {
    Token xsp;
    if (jj_3_26()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) return true;
    }
    return false;
  }

  final private boolean jj_3_42() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_scan_token(STRINGDECIMAL)) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(WORD)) return true;
    if (jj_scan_token(EQUAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(NAME)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_41() {
    if (jj_scan_token(STRINGDECIMAL)) return true;
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(LABEL)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(NODE_SIZE)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(OPEN_PAREN)) return true;
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(30)) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_44()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    if (jj_scan_token(NETWORK)) return true;
    if (jj_scan_token(31)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(32)) return true;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_scan_token(FLOATSCI)) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_scan_token(BAR)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_scan_token(POTENTIAL)) return true;
    if (jj_scan_token(OPEN_PAREN)) return true;
    if (jj_scan_token(WORD)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    if (jj_scan_token(CLOSE_PAREN)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_7()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_17() {
    Token xsp;
    if (jj_3_36()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_scan_token(DECISION)) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(WORD)) return true;
    if (jj_scan_token(EQUAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3_30() {
    Token xsp;
    if (jj_3_29()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_scan_token(STATES)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(OPEN_PAREN)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  public Hugin2ElvParseTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[44];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public Hugin2ElvParse(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Hugin2ElvParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Hugin2ElvParse(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Hugin2ElvParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Hugin2ElvParse(Hugin2ElvParseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(Hugin2ElvParseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[33];
    for (int i = 0; i < 33; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 33; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 44; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
