/* Generated By:JavaCC: Do not edit this line. Genie2ElvParse.java */
package elvira.translator.genie2elv;

import java.util.Vector;
import java.io.*;

import elvira.translator.*;
import elvira.Node;
import elvira.FiniteStates;
import elvira.Continuous;
import elvira.NodeList;
import elvira.Link;
import elvira.LinkList;
import elvira.Bnet;
import elvira.IDiagram;
import elvira.Relation;
import elvira.potential.PotentialTable;
import elvira.Configuration;


public class Genie2ElvParse extends ToElvParse implements Genie2ElvParseConstants {
  public static void main(String args[]) throws ParseException
   ,IOException {
   IDiagram b;
   FileInputStream networkFile;
   FileWriter networkOutputFile;


   if (args.length<2)
     System.out.println("Too few arguments. Arguments are: GenieFile ElviraFile");
   else {
     networkFile = new FileInputStream(args[0]);
     Genie2ElvParse parser = new Genie2ElvParse(networkFile);
     parser.initialize();

     parser.CompilationUnit();
     b=new IDiagram();
     /*if(parser.isID){
       b=new IDiagram();
     }
     else{
       b=new Bnet();
     }*/
     b.translate((ToElvParse)parser);
     networkOutputFile= new FileWriter(args[1]);
     b.saveBnet(networkOutputFile);
     networkOutputFile.close();
   }
  }

  private class Pos{
    int centerX=0;
    int centerY=0;
    int width=0;
    int height=0;

  }

  final public void CompilationUnit() throws ParseException {
    NetworkDeclaration();
    jj_consume_token(SEP);
    jj_consume_token(0);
  }

  final public void NetworkDeclaration() throws ParseException {
 Token T;
    jj_consume_token(NET);
    T = jj_consume_token(ID);
   Name=(T.toString());
    jj_consume_token(47);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HEADER:
      case CREATION:
      case NUMSAMPLES:
      case SCREEN:
      case SCREENCOMMENT:
      case BKCOLOR:
      case WINDOWPOSITION:
      case NODE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      NetStatement();
      jj_consume_token(SEP);
    }
    jj_consume_token(48);
  }

  final public void NetStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HEADER:
    case CREATION:
    case NUMSAMPLES:
    case SCREEN:
    case SCREENCOMMENT:
    case BKCOLOR:
    case WINDOWPOSITION:
      NetField();
      break;
    case NODE:
      NodeDeclaration();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NetField() throws ParseException {
 Token T;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HEADER:
      jj_consume_token(HEADER);
      jj_consume_token(EQUAL);
      jj_consume_token(47);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFICATOR:
        case COMMENT:
        case NAME:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        HeaderStatement();
        jj_consume_token(SEP);
      }
      jj_consume_token(48);
      break;
    case CREATION:
      jj_consume_token(CREATION);
      jj_consume_token(EQUAL);
      jj_consume_token(47);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CREATOR:
        case CREATED:
        case MODIFIED:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        CreationStatement();
        jj_consume_token(SEP);
      }
      jj_consume_token(48);
      break;
    case NUMSAMPLES:
      T = jj_consume_token(NUMSAMPLES);
      jj_consume_token(EQUAL);
      jj_consume_token(INTEGER);
    System.out.println("Warning: Encountered: NUMSAMPLES=Integer at line " + T.beginLine + ", column " + T.beginColumn  +
      ". Ignoring it. This network property is not supported in Elvira format\n");
      break;
    case SCREEN:
      jj_consume_token(SCREEN);
      jj_consume_token(EQUAL);
      jj_consume_token(47);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLOR:
        case SELCOLOR:
        case FONT:
        case FONTCOLOR:
        case BORDERTHICKNESS:
        case BORDERCOLOR:
        case POSITION:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        ScreenProperty();
        jj_consume_token(SEP);
      }
      jj_consume_token(48);
      break;
    case WINDOWPOSITION:
      T = jj_consume_token(WINDOWPOSITION);
      jj_consume_token(EQUAL);
      Position();
    System.out.println("Warning: Encountered: WINDOWPOSITION = ... at line " + T.beginLine + ", column " + T.beginColumn  +
      ". Ignoring it. This network property is not supported in Elvira format\n");
      break;
    case BKCOLOR:
      T = jj_consume_token(BKCOLOR);
      jj_consume_token(EQUAL);
      jj_consume_token(INTEGER);
    System.out.println("Warning: Encountered: BKCOLOR=Integer at line " + T.beginLine + ", column " + T.beginColumn  +
      ". Ignoring it. This network property is not supported in Elvira format\n");
      break;
    case SCREENCOMMENT:
      T = jj_consume_token(SCREENCOMMENT);
      jj_consume_token(EQUAL);
      jj_consume_token(47);
      jj_consume_token(49);
      jj_consume_token(INTEGER);
      jj_consume_token(50);
      jj_consume_token(INTEGER);
      jj_consume_token(50);
      jj_consume_token(INTEGER);
      jj_consume_token(50);
      jj_consume_token(INTEGER);
      jj_consume_token(51);
      jj_consume_token(50);
      jj_consume_token(STRING);
      jj_consume_token(48);
    System.out.println("Warning: Encountered: SCREENCOMMENT = ... at line " + T.beginLine + ", column " + T.beginColumn  +
      ". Ignoring it. This network property is not supported in Elvira format\n");
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void HeaderStatement() throws ParseException {
 Token T;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICATOR:
      jj_consume_token(IDENTIFICATOR);
      jj_consume_token(EQUAL);
      T = jj_consume_token(ID);
    Name=(T.toString());
      break;
    case NAME:
      jj_consume_token(NAME);
      jj_consume_token(EQUAL);
      T = jj_consume_token(STRING);
    Title=(T.image.substring(1,T.image.length()-1));
      break;
    case COMMENT:
      jj_consume_token(COMMENT);
      jj_consume_token(EQUAL);
      T = jj_consume_token(STRING);
    Comment=(T.image.substring(1,T.image.length()-1));
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void CreationStatement() throws ParseException {
 Token T;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATOR:
      jj_consume_token(CREATOR);
      jj_consume_token(EQUAL);
      T = jj_consume_token(STRING);
    Author=T.image.substring(1,T.image.length()-1);
      break;
    case CREATED:
      T = jj_consume_token(CREATED);
      jj_consume_token(EQUAL);
      jj_consume_token(STRING);
    System.out.println("Warning: Encountered: CREATED = String at line " + T.beginLine + ", column " + T.beginColumn  +
      ". Ignoring it. This network property is not supported in Elvira format\n");
      break;
    case MODIFIED:
      jj_consume_token(MODIFIED);
      jj_consume_token(EQUAL);
      T = jj_consume_token(STRING);
    WhenChanged=T.image.substring(1,T.image.length()-1);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Pos Position() throws ParseException {
 Pos pos=new Pos();
 Token T;
    jj_consume_token(47);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CENTER_X:
      case CENTER_Y:
      case WIDTH:
      case HEIGHT:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CENTER_X:
        jj_consume_token(CENTER_X);
        jj_consume_token(EQUAL);
        T = jj_consume_token(INTEGER);
        pos.centerX=Integer.valueOf(T.image).intValue();
        break;
      case CENTER_Y:
        jj_consume_token(CENTER_Y);
        jj_consume_token(EQUAL);
        T = jj_consume_token(INTEGER);
        pos.centerY=Integer.valueOf(T.image).intValue();
        break;
      case WIDTH:
        jj_consume_token(WIDTH);
        jj_consume_token(EQUAL);
        T = jj_consume_token(INTEGER);
        pos.width=Integer.valueOf(T.image).intValue();
        break;
      case HEIGHT:
        jj_consume_token(HEIGHT);
        jj_consume_token(EQUAL);
        T = jj_consume_token(INTEGER);
        pos.height=Integer.valueOf(T.image).intValue();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEP);
    }
    jj_consume_token(48);
    {if (true) return pos;}
    throw new Error("Missing return statement in function");
  }

  final public void ScreenProperty() throws ParseException {
 Token T;
 Pos pos;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POSITION:
      T = jj_consume_token(POSITION);
      jj_consume_token(EQUAL);
      pos = Position();
      break;
    case COLOR:
      T = jj_consume_token(COLOR);
      jj_consume_token(EQUAL);
      jj_consume_token(INTEGER);
      break;
    case SELCOLOR:
      T = jj_consume_token(SELCOLOR);
      jj_consume_token(EQUAL);
      jj_consume_token(INTEGER);
      break;
    case FONT:
      T = jj_consume_token(FONT);
      jj_consume_token(EQUAL);
      jj_consume_token(INTEGER);
      break;
    case FONTCOLOR:
      T = jj_consume_token(FONTCOLOR);
      jj_consume_token(EQUAL);
      jj_consume_token(INTEGER);
      break;
    case BORDERTHICKNESS:
      T = jj_consume_token(BORDERTHICKNESS);
      jj_consume_token(EQUAL);
      jj_consume_token(INTEGER);
      break;
    case BORDERCOLOR:
      T = jj_consume_token(BORDERCOLOR);
      jj_consume_token(EQUAL);
      jj_consume_token(INTEGER);
    System.out.println("Warning: Encountered \"" +T.toString()+"\"= ..." + " at line " +
      T.beginLine + ", column " + T.beginColumn  +
      ". Ignoring it. This network property is not supported in Elvira format\n");
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NodeDeclaration() throws ParseException {
  Token T,Type;
  int nodeType;
  Relation relation=null;
  Node N=null;
    jj_consume_token(NODE);
    T = jj_consume_token(ID);
    jj_consume_token(47);
    jj_consume_token(TYPE);
    jj_consume_token(EQUAL);
    Type = jj_consume_token(ONETYPE);
    jj_consume_token(SEP);
    if(Type.image.equals("CPT") || Type.image.equals("LIST")){
      N=(FiniteStates) DefaultFinite.copy();
      if(Type.image.equals("LIST")){
        N.setKindOfNode(Node.DECISION);
      }
    }
    else if(Type.image.equals("TABLE")){
      N= (Continuous) DefaultContinuous.copy();
      N.setKindOfNode(Node.UTILITY);
    }
    else{
      System.out.println("Error in Genie to Elvira translator: Encountered \"Type=" +
                         Type.toString()+"\" at line " + Type.beginLine +
                         ", column " + Type.beginColumn  +
                         ". This type of node is not supported yet in the translator\n");
      System.exit(1);
    }
    N.setName(T.image);
    Nodes.insertNode(N);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HEADER:
      case SCREEN:
      case PARENTS:
      case DEFINITION:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HEADER:
      case SCREEN:
      case DEFINITION:
        NodeField(N,relation);
        break;
      case PARENTS:
        relation = ParentsDeclaration(N);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEP);
    }
    jj_consume_token(48);
  }

  final public Relation ParentsDeclaration(Node N) throws ParseException {
  Token T;
  Link K;
  Relation R=null;
  Vector listVariables=new Vector();
  listVariables.addElement(N.getName());
    jj_consume_token(PARENTS);
    jj_consume_token(EQUAL);
    jj_consume_token(49);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      T = jj_consume_token(ID);
           K=null;
           K = new Link(true);
           K.setHead (Nodes.getNode((String)N.getName()));
           K.setTail (Nodes.getNode((String)T.image) );
           Links.insertLink(K);
           listVariables.addElement(T.toString());
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 50:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_7;
        }
        jj_consume_token(50);
        T = jj_consume_token(ID);
           K=null;
           K = new Link(true);
           K.setHead (Nodes.getNode((String)N.getName()));
           K.setTail (Nodes.getNode((String)T.image) );
           Links.insertLink(K);
           listVariables.addElement(T.toString());
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(51);
        if((N.getKindOfNode()==Node.CHANCE) || (N.getKindOfNode()==Node.UTILITY)){
          R = DefaultRelation.copy();
          R.setVariablesFromNames(listVariables,Nodes);
          if(R.withUtilityNode()){
            R.setKind(R.UTILITY);
          }
          Relations.addElement(R);
        }
        {if (true) return R;}
    throw new Error("Missing return statement in function");
  }

  final public void NodeField(Node N, Relation R) throws ParseException {
  Token T;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HEADER:
      jj_consume_token(HEADER);
      jj_consume_token(EQUAL);
      jj_consume_token(47);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFICATOR:
        case COMMENT:
        case NAME:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_8;
        }
        NodeHeaderStatement(N);
        jj_consume_token(SEP);
      }
      jj_consume_token(48);
      break;
    case SCREEN:
      jj_consume_token(SCREEN);
      jj_consume_token(EQUAL);
      jj_consume_token(47);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLOR:
        case SELCOLOR:
        case FONT:
        case FONTCOLOR:
        case BORDERTHICKNESS:
        case BORDERCOLOR:
        case POSITION:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_9;
        }
        NodeScreenProperty(N);
        jj_consume_token(SEP);
      }
      jj_consume_token(48);
      break;
    case DEFINITION:
      jj_consume_token(DEFINITION);
      jj_consume_token(EQUAL);
      jj_consume_token(47);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAMESTATES:
        case PROBABILITIES:
        case NAMECHOICES:
        case UTILITIES:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_10;
        }
        NodeDefinitionStatement(N,R);
        jj_consume_token(SEP);
      }
      jj_consume_token(48);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NodeDefinitionStatement(Node N, Relation R) throws ParseException {
  Vector V=new Vector();
  PotentialTable potTable;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAMESTATES:
      jj_consume_token(NAMESTATES);
      jj_consume_token(EQUAL);
      jj_consume_token(49);
      ListStates(V);
      jj_consume_token(51);
      ((FiniteStates)N).setStates(V);
      break;
    case PROBABILITIES:
      jj_consume_token(PROBABILITIES);
      jj_consume_token(EQUAL);
      potTable = new PotentialTable(R.getVariables());
      potTable.setValue(-1.0);
      jj_consume_token(49);
      ListFloats(potTable);
      jj_consume_token(51);
      R.setValues(potTable);
      break;
    case NAMECHOICES:
      jj_consume_token(NAMECHOICES);
      jj_consume_token(EQUAL);
      jj_consume_token(49);
      ListStates(V);
      jj_consume_token(51);
      ((FiniteStates)N).setStates(V);
      break;
    case UTILITIES:
      jj_consume_token(UTILITIES);
      jj_consume_token(EQUAL);
      potTable = new PotentialTable(R.chanceAndDecisionNodes());
      potTable.setValue(0.0);
      jj_consume_token(49);
      ListFloats(potTable);
      jj_consume_token(51);
      R.setValues(potTable);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ListStates(Vector C) throws ParseException {
  Token T;
    T = jj_consume_token(ID);
            C.addElement(T.toString());
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_11;
      }
      jj_consume_token(50);
      T = jj_consume_token(ID);
                 C.addElement(T.toString());
    }
  }

  final public void ListFloats(PotentialTable Table) throws ParseException {
 Token T;
 int i;
 Double D;

 Configuration conf=new Configuration();
 for(i=1;i<Table.getVariables().size();i++){
        conf.insert((FiniteStates)(Table.getVariables().elementAt(i)),0);
 }
 conf.insert((FiniteStates)(Table.getVariables().elementAt(0)),0);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT:
      T = jj_consume_token(FLOAT);
      break;
    case FLOATSCI:
      T = jj_consume_token(FLOATSCI);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      D= new Double(T.image);
      Table.setValue(conf,D.doubleValue());
      conf.nextConfiguration();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_12;
      }
      jj_consume_token(50);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLOAT:
        T = jj_consume_token(FLOAT);
        break;
      case FLOATSCI:
        T = jj_consume_token(FLOATSCI);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      D= new Double(T.image);
      Table.setValue(conf,D.doubleValue());
      conf.nextConfiguration();
    }
  }

  final public void NodeHeaderStatement(Node N) throws ParseException {
 Token T;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICATOR:
      jj_consume_token(IDENTIFICATOR);
      jj_consume_token(EQUAL);
      T = jj_consume_token(ID);
    N.setName(T.image);
      break;
    case NAME:
      jj_consume_token(NAME);
      jj_consume_token(EQUAL);
      T = jj_consume_token(STRING);
    N.setTitle(T.image.substring(1,T.image.length()-1));
      break;
    case COMMENT:
      jj_consume_token(COMMENT);
      jj_consume_token(EQUAL);
      T = jj_consume_token(STRING);
    N.setComment(T.image.substring(1,T.image.length()-1));
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NodeScreenProperty(Node N) throws ParseException {
 Token T;
 Pos pos;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POSITION:
      T = jj_consume_token(POSITION);
      jj_consume_token(EQUAL);
      pos = Position();
    N.setPosX(pos.centerX);
    N.setPosY(pos.centerY);
    N.setHigherAxis(pos.width);
    N.setLowerAxis(pos.height);
      break;
    case COLOR:
    case SELCOLOR:
    case FONT:
    case FONTCOLOR:
    case BORDERTHICKNESS:
    case BORDERCOLOR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLOR:
        T = jj_consume_token(COLOR);
        jj_consume_token(EQUAL);
        jj_consume_token(INTEGER);
        break;
      case SELCOLOR:
        T = jj_consume_token(SELCOLOR);
        jj_consume_token(EQUAL);
        jj_consume_token(INTEGER);
        break;
      case FONT:
        T = jj_consume_token(FONT);
        jj_consume_token(EQUAL);
        jj_consume_token(INTEGER);
        break;
      case FONTCOLOR:
        T = jj_consume_token(FONTCOLOR);
        jj_consume_token(EQUAL);
        jj_consume_token(INTEGER);
        break;
      case BORDERTHICKNESS:
        T = jj_consume_token(BORDERTHICKNESS);
        jj_consume_token(EQUAL);
        jj_consume_token(INTEGER);
        break;
      case BORDERCOLOR:
        T = jj_consume_token(BORDERCOLOR);
        jj_consume_token(EQUAL);
        jj_consume_token(INTEGER);
    System.out.println("Warning: Encountered \"" +T.toString()+"\"= ..." + " at line " +
      T.beginLine + ", column " + T.beginColumn  +
      ". Ignoring it. This node property is not supported in Elvira format\n");
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  public Genie2ElvParseTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[27];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x2006070,0x2006070,0xc00,0x380,0x1f80000,0x2006070,0xc00,0x380,0x78000,0x78000,0x1f80000,0xc002010,0xc002010,0x0,0x0,0xc00,0x1f80000,0xf0000000,0x8002010,0xf0000000,0x0,0x0,0x0,0x0,0xc00,0x1f80000,0x1f80000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x12,0x12,0x4,0x0,0x8,0x2,0x4,0x0,0x0,0x0,0x8,0x0,0x0,0x40000,0x200,0x4,0x8,0x0,0x0,0x0,0x40000,0x180,0x40000,0x180,0x4,0x0,0x8,};
   }

  public Genie2ElvParse(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Genie2ElvParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  public Genie2ElvParse(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Genie2ElvParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  public Genie2ElvParse(Genie2ElvParseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  public void ReInit(Genie2ElvParseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[52];
    for (int i = 0; i < 52; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 27; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
