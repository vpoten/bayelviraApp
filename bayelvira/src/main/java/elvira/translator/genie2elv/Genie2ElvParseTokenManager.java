/* Generated By:JavaCC: Do not edit this line. Genie2ElvParseTokenManager.java */
package elvira.translator.genie2elv;
import java.util.Vector;
import java.io.*;
import elvira.translator.*;
import elvira.Node;
import elvira.FiniteStates;
import elvira.Continuous;
import elvira.NodeList;
import elvira.Link;
import elvira.LinkList;
import elvira.Bnet;
import elvira.IDiagram;
import elvira.Relation;
import elvira.potential.PotentialTable;
import elvira.Configuration;

public class Genie2ElvParseTokenManager implements Genie2ElvParseConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x989a0L) != 0L)
         {
            jjmatchedKind = 41;
            return 2;
         }
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 41;
            return 8;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 41;
            return 19;
         }
         if ((active0 & 0x1ffff66450L) != 0L)
         {
            jjmatchedKind = 41;
            return 11;
         }
         return -1;
      case 1:
         if ((active0 & 0x400L) != 0L)
            return 11;
         if ((active0 & 0x1ffffffbf0L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 1;
            return 11;
         }
         return -1;
      case 2:
         if ((active0 & 0x1efffffbf0L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 2;
            return 11;
         }
         if ((active0 & 0x100000000L) != 0L)
            return 11;
         return -1;
      case 3:
         if ((active0 & 0xaaf9febf0L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 41;
               jjmatchedPos = 3;
            }
            return 11;
         }
         if ((active0 & 0x1450601000L) != 0L)
            return 11;
         return -1;
      case 4:
         if ((active0 & 0xa0000L) != 0L)
            return 11;
         if ((active0 & 0xaffd5ebf0L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 4;
            return 11;
         }
         return -1;
      case 5:
         if ((active0 & 0xaffd18be0L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 41;
               jjmatchedPos = 5;
            }
            return 11;
         }
         if ((active0 & 0x46010L) != 0L)
            return 11;
         return -1;
      case 6:
         if ((active0 & 0xaf9d1c260L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 6;
            return 11;
         }
         if ((active0 & 0x6000980L) != 0L)
            return 11;
         return -1;
      case 7:
         if ((active0 & 0x800118220L) != 0L)
            return 11;
         if ((active0 & 0x2f9c04040L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 7;
            return 11;
         }
         return -1;
      case 8:
         if ((active0 & 0x80400000L) != 0L)
            return 11;
         if ((active0 & 0x279804040L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 8;
            return 11;
         }
         return -1;
      case 9:
         if ((active0 & 0x261804000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 9;
            return 11;
         }
         if ((active0 & 0x18000040L) != 0L)
            return 11;
         return -1;
      case 10:
         if ((active0 & 0x41000000L) != 0L)
            return 11;
         if ((active0 & 0x220804000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 10;
            return 11;
         }
         return -1;
      case 11:
         if ((active0 & 0x220804000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 11;
            return 11;
         }
         return -1;
      case 12:
         if ((active0 & 0x200800000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 12;
            return 11;
         }
         if ((active0 & 0x20004000L) != 0L)
            return 11;
         return -1;
      case 13:
         if ((active0 & 0x200000000L) != 0L)
            return 11;
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 13;
            return 11;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 49);
      case 41:
         return jjStopAtPos(0, 51);
      case 44:
         return jjStopAtPos(0, 50);
      case 59:
         return jjStopAtPos(0, 46);
      case 61:
         return jjStopAtPos(0, 44);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x3800000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x989a0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x600000L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x40010L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x450000040L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x824000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x106000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x200020000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1100000000L);
      case 123:
         return jjStopAtPos(0, 47);
      case 125:
         return jjStopAtPos(0, 48);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x454000000L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000L);
      case 68:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(1, 10, 11);
         break;
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x8158010L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x200020000L);
      case 75:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x801e80a00L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x200001a0L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 89:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x10L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0x20200L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x1a0L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x80040000L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x180000L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x450000840L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x200618000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x5806000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x1a0L);
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x201800010L);
      case 69:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 11);
         else if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x54006000L);
      case 71:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x808000200L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 77:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x2080000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      case 84:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x438000L);
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000040L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x40400000L);
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x181e810L);
      case 70:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      case 72:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 11);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0xc000000L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x200100000L);
      case 82:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 11);
         break;
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000001a0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 72:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x808000220L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 77:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L);
      case 78:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x4800L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x2400080L);
      case 82:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 4, 11);
         return jjMoveStringLiteralDfa6_0(active0, 0x1818000L);
      case 84:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 11);
         return jjMoveStringLiteralDfa6_0(active0, 0x94000000L);
      case 87:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x1004000L);
      case 68:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 11);
         break;
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0xa0000000L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x840100020L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000040L);
      case 82:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 7, 11);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 11);
         break;
      case 83:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 11);
         break;
      case 84:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 11, 11);
         return jjMoveStringLiteralDfa7_0(active0, 0x8800000L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x18000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 9, 11);
         break;
      case 69:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L);
      case 72:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x48000000L);
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000040L);
      case 78:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 5, 11);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 35, 11);
         break;
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0x201404000L);
      case 82:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 20, 11);
         break;
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L);
      case 88:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 15, 11);
         break;
      case 89:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 16, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000L);
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000040L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x20800000L);
      case 76:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      case 77:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L);
      case 82:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 22, 11);
         break;
      case 83:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 31, 11);
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000L);
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000L);
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000L);
      case 77:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000L);
      case 78:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(9, 27, 11);
         break;
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000L);
      case 83:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(9, 6, 11);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(9, 28, 11);
         break;
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000L);
      case 73:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000L);
      case 75:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000L);
      case 82:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(10, 24, 11);
         break;
      case 83:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(10, 30, 11);
         break;
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000L);
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000L);
      case 78:
         return jjMoveStringLiteralDfa12_0(active0, 0x804000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000L);
      case 79:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000L);
      case 83:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(12, 29, 11);
         break;
      case 84:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(12, 14, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(13, 33, 11);
         break;
      case 83:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 83:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(14, 23, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 52;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(11);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAddStates(0, 5);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  else if (curChar == 47)
                     jjAddStates(9, 10);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(11);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(11);
                  break;
               case 12:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 13:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 14:
                  if (curChar == 34 && kind > 45)
                     kind = 45;
                  break;
               case 28:
                  if (curChar == 47)
                     jjAddStates(9, 10);
                  break;
               case 29:
                  if (curChar == 47)
                     jjCheckNAddStates(11, 13);
                  break;
               case 30:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 31:
               case 32:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 33:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(35, 36);
                  break;
               case 35:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(35, 36);
                  break;
               case 36:
                  if (curChar == 42)
                     jjAddStates(14, 15);
                  break;
               case 37:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 36);
                  break;
               case 38:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 36);
                  break;
               case 39:
                  if (curChar == 47 && kind > 3)
                     kind = 3;
                  break;
               case 40:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAdd(41);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 43:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 46:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAdd(47);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 49:
                  if (curChar != 46)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAdd(50);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAddStates(0, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     jjCheckNAdd(11);
                  }
                  if (curChar == 80)
                     jjCheckNAdd(1);
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     jjCheckNAdd(11);
                  }
                  if (curChar == 84)
                     jjAddStates(19, 20);
                  else if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     jjCheckNAdd(11);
                  }
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     jjCheckNAdd(11);
                  }
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 1:
                  if (curChar == 84 && kind > 37)
                     kind = 37;
                  break;
               case 3:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 83)
                     jjCheckNAdd(1);
                  break;
               case 5:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 85 && kind > 37)
                     kind = 37;
                  break;
               case 9:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(11);
                  break;
               case 13:
                  jjAddStates(21, 22);
                  break;
               case 15:
                  if (curChar == 84)
                     jjAddStates(19, 20);
                  break;
               case 16:
                  if (curChar == 69 && kind > 37)
                     kind = 37;
                  break;
               case 17:
               case 20:
                  if (curChar == 76)
                     jjCheckNAdd(16);
                  break;
               case 18:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 21:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 30:
                  jjAddStates(11, 13);
                  break;
               case 35:
                  jjCheckNAddTwoStates(35, 36);
                  break;
               case 37:
               case 38:
                  jjCheckNAddTwoStates(38, 36);
                  break;
               case 45:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 13:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(21, 22);
                  break;
               case 30:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(11, 13);
                  break;
               case 35:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(35, 36);
                  break;
               case 37:
               case 38:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(38, 36);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 52 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   41, 42, 43, 45, 48, 49, 41, 42, 48, 29, 34, 30, 31, 33, 37, 39, 
   42, 43, 45, 19, 27, 13, 14, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\110\105\101\104\105\122", 
"\103\122\105\101\124\111\117\116", "\116\125\115\123\101\115\120\114\105\123", "\103\122\105\101\124\117\122", 
"\103\122\105\101\124\105\104", "\115\117\104\111\106\111\105\104", "\111\104", 
"\103\117\115\115\105\116\124", "\124\131\120\105", "\123\103\122\105\105\116", 
"\123\103\122\105\105\116\103\117\115\115\105\116\124", "\103\105\116\124\105\122\137\130", "\103\105\116\124\105\122\137\131", 
"\127\111\104\124\110", "\110\105\111\107\110\124", "\103\117\114\117\122", 
"\123\105\114\103\117\114\117\122", "\106\117\116\124", "\106\117\116\124\103\117\114\117\122", 
"\102\117\122\104\105\122\124\110\111\103\113\116\105\123\123", "\102\117\122\104\105\122\103\117\114\117\122", 
"\102\113\103\117\114\117\122", "\120\101\122\105\116\124\123", "\104\105\106\111\116\111\124\111\117\116", 
"\116\101\115\105\123\124\101\124\105\123", "\120\122\117\102\101\102\111\114\111\124\111\105\123", 
"\116\101\115\105\103\110\117\111\103\105\123", "\125\124\111\114\111\124\111\105\123", "\156\145\164", 
"\127\111\116\104\117\127\120\117\123\111\124\111\117\116", "\116\101\115\105", "\120\117\123\111\124\111\117\116", "\156\157\144\145", 
null, null, null, null, null, null, null, "\75", null, "\73", "\173", "\175", "\50", 
"\54", "\51", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xff3fffffffff1L, 
};
static final long[] jjtoSkip = {
   0xeL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[52];
private final int[] jjstateSet = new int[104];
protected char curChar;
public Genie2ElvParseTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public Genie2ElvParseTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 52; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
