/* Generated By:JavaCC: Do not edit this line. BayesNetParseTokenManager.java */
package elvira.parser;
import java.util.Vector;
import java.util.Enumeration;
import java.util.Hashtable;
import elvira.Node;
import elvira.NodeList;
import elvira.FiniteStates;
import elvira.Continuous;
import elvira.Configuration;
import elvira.potential.*;
import elvira.Relation;
import elvira.Link;
import elvira.LinkList;
import elvira.ValuesSet;
import elvira.LogicalNode;
import elvira.tools.LinearFunction;
import elvira.tools.QuadraticFunction;
import java.io.*;
import elvira.sensitivityAnalysis.GeneralizedPotentialTable;

public class BayesNetParseTokenManager implements BayesNetParseConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xf010000800L) != 0L)
         {
            jjmatchedKind = 91;
            return 3;
         }
         if ((active1 & 0x6000000100L) != 0L)
            return 63;
         if ((active1 & 0x2000240L) != 0L)
            return 64;
         if ((active0 & 0xfffbff0fefbff7f0L) != 0L || (active1 & 0x183fL) != 0L)
         {
            jjmatchedKind = 91;
            return 65;
         }
         if ((active0 & 0x4000000400000L) != 0L)
         {
            jjmatchedKind = 91;
            return 7;
         }
         return -1;
      case 1:
         if ((active1 & 0x20L) != 0L)
            return 65;
         if ((active0 & 0xc000000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 1;
            return 2;
         }
         if ((active0 & 0xffffff3ffffffff0L) != 0L || (active1 & 0x181fL) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 1;
            return 65;
         }
         return -1;
      case 2:
         if ((active0 & 0xe0000000000300L) != 0L)
            return 65;
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0xff1ffffffffffc70L) != 0L || (active1 & 0x181fL) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 2;
            return 65;
         }
         return -1;
      case 3:
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x8c081200400L) != 0L)
            return 65;
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0xff1ff73f3edff870L) != 0L || (active1 & 0x181fL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 3;
            }
            return 65;
         }
         return -1;
      case 4:
         if ((active0 & 0xff06f70c0edff060L) != 0L || (active1 & 0x100fL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 4;
            }
            return 65;
         }
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x18000030000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1003300000810L) != 0L || (active1 & 0x810L) != 0L)
            return 65;
         return -1;
      case 5:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x18000030000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x102000c00084000L) != 0L)
            return 65;
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0xee04f7000ed7b060L) != 0L || (active1 & 0x100fL) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 5;
            return 65;
         }
         return -1;
      case 6:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x18000030000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x60000400000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x8800700000042020L) != 0L || (active1 & 0x2L) != 0L)
            return 65;
         if ((active0 & 0x660481000e939040L) != 0L || (active1 & 0x100dL) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 6;
            }
            return 65;
         }
         return -1;
      case 7:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x18000030000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x60000400000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x604800002000040L) != 0L)
            return 65;
         if ((active0 & 0x600001000c939000L) != 0L || (active1 & 0x1005L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 7;
            return 65;
         }
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x2000000000000000L) != 0L || (active1 & 0x1L) != 0L)
            return 65;
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x18000030000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x60000400000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x400001000c939000L) != 0L || (active1 & 0x1004L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 8;
            return 65;
         }
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x18000030000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x60000400000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x10000808000L) != 0L || (active1 & 0x4L) != 0L)
            return 65;
         if ((active0 & 0x400000000c131000L) != 0L || (active1 & 0x1000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 9;
            }
            return 65;
         }
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x18000030000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x40000400000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x11000L) != 0L)
            return 65;
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x400000000c120000L) != 0L || (active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 10;
            return 65;
         }
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x18000030000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x40000400000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x4000000000100000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0xc020000L) != 0L || (active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 11;
            return 65;
         }
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x18000010000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xc000000L) != 0L)
            return 65;
         if ((active0 & 0x40000400000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x20000L) != 0L || (active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 12;
            return 65;
         }
         if ((active0 & 0x4000000000100000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x18000010000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x4000000000100000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x20000L) != 0L || (active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 13;
            return 65;
         }
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 14;
            return 65;
         }
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x18000010000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x20000L) != 0L)
            return 65;
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x4000000000100000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active1 & 0x1000L) != 0L)
            return 65;
         if ((active0 & 0x18000010000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x4000000000100000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active0 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active0 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active0 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active0 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 74);
      case 35:
         return jjStartNfaWithStates_0(0, 89, 64);
      case 38:
         return jjStartNfaWithStates_0(0, 70, 64);
      case 40:
         return jjStopAtPos(0, 80);
      case 41:
         return jjStopAtPos(0, 81);
      case 42:
         return jjStopAtPos(0, 103);
      case 43:
         return jjStartNfaWithStates_0(0, 101, 63);
      case 44:
         return jjStopAtPos(0, 82);
      case 45:
         jjmatchedKind = 102;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 59:
         return jjStopAtPos(0, 100);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
      case 61:
         return jjStopAtPos(0, 94);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L);
      case 91:
         return jjStopAtPos(0, 83);
      case 93:
         return jjStopAtPos(0, 84);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x2000000004000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x400L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x41000f0000902000L, 0x4L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x200f00004000100L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x21000000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x4000000400000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x10L, 0x1000L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xc0L, 0x20L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x10000020001000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x1080000L, 0x8L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0xc0000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x8000040200020L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x2000000300000000L, 0x2L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x801L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1000000400000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0xf010000800L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x8800000080000200L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x800060000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x18000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 98);
      case 124:
         return jjStopAtPos(0, 71);
      case 125:
         return jjStopAtPos(0, 99);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200L);
      case 62:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x88083800000100L, active1, 0x810L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x20070000e040020L, active1, 0x1001L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000018000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x50800021421a00L, active1, 0L);
      case 110:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(1, 69, 65);
         return jjMoveStringLiteralDfa2_0(active0, 0x80000400L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000030300b82000L, active1, 0xcL);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x4c000000010L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x8800000400000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1004000040004000L, active1, 0x2L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L, active1, 0L);
      case 62:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(2, 73);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000400000010L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000080000L, active1, 0L);
      case 100:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 65);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x104c000010400L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x700000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8800000080000040L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x802000000L, active1, 0x1L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000040002000L, active1, 0L);
      case 110:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 65);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 54, 65);
         return jjMoveStringLiteralDfa3_0(active0, 0x4014030029d01000L, active1, 0x1804L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0L);
      case 112:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 53, 65);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000010000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000040000L, active1, 0x2L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x400080300020000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x2002000004004820L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L);
      case 120:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 55, 65);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x300000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x700002000040L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000008000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x4010040020001000L, active1, 0L);
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 65);
         else if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 65);
         return jjMoveStringLiteralDfa4_0(active0, 0x3408808014000000L, active1, 0x1001L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x202000000400000L, active1, 0x8L);
      case 107:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 65);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x8800003000000800L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000010000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x10L, active1, 0x2L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000008000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x140000L, active1, 0x14L);
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 65);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 65);
         return jjMoveStringLiteralDfa4_0(active0, 0x10400800000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800020000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0xa0L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x18008030000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000020000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x100800000010000L, active1, 0x8L);
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 65);
         else if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 75, 65);
         return jjMoveStringLiteralDfa5_0(active0, 0x22c00082000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x40L, active1, 0L);
      case 104:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 4, 65);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0xc800010008940080L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x5020L, active1, 0x2L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x1400000004000000L, active1, 0x1000L);
      case 115:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 68, 65);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000040000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000002400000L, active1, 0x4L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x700000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0x1L);
      case 120:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 65);
         break;
      case 121:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 65);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 65);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000002000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L, active1, 0x1009L);
      case 100:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 65);
         break;
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 65);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 65);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x204008002000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x740000020000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000802000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x18000038040000L, active1, 0L);
      case 114:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 65);
         return jjMoveStringLiteralDfa6_0(active0, 0x60L, active1, 0x4L);
      case 115:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 65);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 65);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L, active1, 0x2L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0xe800800040000080L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x60000400000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x40010040L, active1, 0x4L);
      case 101:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 65, 65);
         return jjMoveStringLiteralDfa7_0(active0, 0x400800000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x18000030000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x6000002004000000L, active1, 0L);
      case 107:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 5, 65);
         break;
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1008L);
      case 110:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 65);
         return jjMoveStringLiteralDfa7_0(active0, 0x8008008000L, active1, 0x1L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x204000002000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L, active1, 0L);
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 13, 65);
         else if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x600000100000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000800000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x8018600030000080L, active1, 0x8L);
      case 86:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x3000000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1L);
      case 100:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 47, 65);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 58, 65);
         break;
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1004L);
      case 109:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 6, 65);
         break;
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 25, 65);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 50, 65);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 57, 65);
         return jjMoveStringLiteralDfa8_0(active0, 0x2004010000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000010000800000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x21000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x60000400000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x8040000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000000L, active1, 0L);
      case 101:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 64, 65);
         return jjMoveStringLiteralDfa9_0(active0, 0x68040028000L, active1, 0x8L);
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x600004000000L, active1, 0L);
      case 108:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 61, 65);
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000020100000L, active1, 0x4L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x18000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x80L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000400000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000800000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000L, active1, 0L);
      case 122:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000010400000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x120000L, active1, 0L);
      case 100:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(9, 15, 65);
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x18002000010000L, active1, 0x1000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x600000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000020000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(9, 30);
         return jjMoveStringLiteralDfa10_0(active0, 0x10004000000L, active1, 0L);
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(9, 41);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(9, 66, 65);
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0x80L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active0, 0x50000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(10, 16, 65);
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000L, active1, 0x1000L);
      case 101:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(10, 60);
         break;
      case 104:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(10, 12, 65);
         break;
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x8020000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x4018000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x80L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x2010000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x600004400000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000100000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1000L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x18008000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(11, 29);
         return jjMoveStringLiteralDfa12_0(active0, 0x600008400000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x14000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x80L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x8L);
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x50000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x2010000000L, active1, 0x1000L);
      case 99:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(12, 26, 65);
         break;
      case 100:
         return jjMoveStringLiteralDfa13_0(active0, 0x80L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000020000L, active1, 0L);
      case 108:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(12, 39);
         break;
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000000100000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x650000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(12, 22);
         break;
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x18000000000000L, active1, 0L);
      case 122:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(12, 27, 65);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000L, active1, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x50000000080L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x18000000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(13, 37);
         break;
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000000100000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x8L);
      case 118:
         return jjMoveStringLiteralDfa14_0(active0, 0x600000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000600000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(14, 40);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(14, 42);
         break;
      case 108:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000000L, active1, 0x1000L);
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(14, 17, 65);
         break;
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x4018000000100000L, active1, 0L);
      case 115:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(14, 7);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 98:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(15, 62);
         break;
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(15, 28);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(15, 76, 65);
         break;
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x8L);
      case 108:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 15;
         }
         return jjMoveStringLiteralDfa16_0(active0, 0x400000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(15, 51);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(15, 52);
         break;
      case 112:
         return jjMoveStringLiteralDfa16_0(active0, 0x100000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa16_0(active0, 0x8000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1);
      return 16;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0x100000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x8000000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x8L);
      case 115:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(16, 46);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1);
      return 17;
   }
   switch(curChar)
   {
      case 110:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(17, 67);
         break;
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x8000000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa18_0(active0, 0x100000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(16, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(18, 63);
         break;
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
private final int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa21_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L);
}
private final int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(21, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 63;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0xd7ff40f8fffff9ffL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(56);
                  }
                  if ((0xd7ff40f8fffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  if ((0xd7ff40f8fffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  if ((0xd7ff40f8fffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 65:
                  if ((0xd7ff40f8fffff9ffL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(56);
                  }
                  if ((0xd7ff40f8fffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  if ((0xd7ff40f8fffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  if ((0xd7ff40f8fffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 3:
                  if ((0xd7ff40f8fffff9ffL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(56);
                  }
                  if ((0xd7ff40f8fffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  if ((0xd7ff40f8fffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  if ((0xd7ff40f8fffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 64:
                  if ((0xd7ff40f8fffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  if ((0xd7ff40f8fffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 0:
                  if ((0xd7ff40f8fffff9ffL & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 47)
                     jjAddStates(10, 11);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddStates(12, 17);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  break;
               case 7:
                  if ((0xd7ff40f8fffff9ffL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(56);
                  }
                  if ((0xd7ff40f8fffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  if ((0xd7ff40f8fffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  if ((0xd7ff40f8fffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjCheckNAdd(36);
                  }
                  break;
               case 10:
                  if (curChar == 32)
                     jjAddStates(21, 22);
                  break;
               case 11:
                  if (curChar == 50 && kind > 97)
                     kind = 97;
                  break;
               case 12:
                  if (curChar == 47)
                     jjAddStates(10, 11);
                  break;
               case 13:
                  if (curChar == 47)
                     jjCheckNAddStates(23, 25);
                  break;
               case 14:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(23, 25);
                  break;
               case 15:
               case 16:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 17:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 19:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 20:
                  if (curChar == 42)
                     jjAddStates(26, 27);
                  break;
               case 21:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 20);
                  break;
               case 22:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 20);
                  break;
               case 23:
                  if (curChar == 47 && kind > 3)
                     kind = 3;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddStates(12, 17);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAdd(25);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 27:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 30:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(31);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 33:
                  if (curChar != 46)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(34);
                  break;
               case 35:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(36);
                  break;
               case 37:
                  if ((0xd7ff40f8fffff9ffL & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 38:
                  if ((0xd7ff40f8fffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
                  if ((0xd7ff40f8fffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 42:
                  if ((0xd7ff40f8fffff9ffL & l) != 0L)
                     jjAddStates(28, 29);
                  break;
               case 44:
                  if ((0xd7ff40f8fffff9ffL & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 45:
                  if (curChar == 44)
                     jjCheckNAddStates(33, 35);
                  break;
               case 46:
                  if ((0xd7ff40f8fffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 48:
                  if ((0xd7ff40f8fffff9ffL & l) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 50:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(39, 41);
                  break;
               case 52:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 44);
                  break;
               case 54:
                  if ((0xd7ff40f8fffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 56:
                  if ((0xd7ff40f8fffff9ffL & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAdd(56);
                  break;
               case 58:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 60:
                  if (curChar == 34 && kind > 95)
                     kind = 95;
                  break;
               case 61:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  break;
               case 62:
                  if (curChar == 34 && kind > 96)
                     kind = 96;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0xc7ffffff97ffffffL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(56);
                  }
                  else if (curChar == 91)
                     jjCheckNAddStates(45, 47);
                  if ((0xc7ffffff97ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  if ((0xc7ffffff97ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  if ((0xc7ffffff97ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(56);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  if (curChar == 117)
                     jjCheckNAdd(1);
                  break;
               case 65:
                  if ((0xc7ffffff97ffffffL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(56);
                  }
                  else if (curChar == 91)
                     jjCheckNAddStates(45, 47);
                  if ((0xc7ffffff97ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  if ((0xc7ffffff97ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  if ((0xc7ffffff97ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(56);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 3:
                  if ((0xc7ffffff97ffffffL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(56);
                  }
                  else if (curChar == 91)
                     jjCheckNAddStates(45, 47);
                  if ((0xc7ffffff97ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  if ((0xc7ffffff97ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  if ((0xc7ffffff97ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(56);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 64:
                  if ((0xc7ffffff97ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  if ((0xc7ffffff97ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(56);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 0:
                  if ((0xc7ffffff97ffffffL & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  else if (curChar == 94)
                     jjAddStates(21, 22);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddStates(48, 50);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  if ((0xc7ffffff97ffffffL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(56);
                  }
                  else if (curChar == 91)
                     jjCheckNAddStates(45, 47);
                  if ((0xc7ffffff97ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  if ((0xc7ffffff97ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  if ((0xc7ffffff97ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(56);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 1:
                  if (curChar == 101 && kind > 77)
                     kind = 77;
                  break;
               case 4:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 115)
                     jjCheckNAdd(1);
                  break;
               case 6:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 8:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 94)
                     jjAddStates(21, 22);
                  break;
               case 14:
                  jjAddStates(23, 25);
                  break;
               case 19:
                  jjCheckNAddTwoStates(19, 20);
                  break;
               case 21:
               case 22:
                  jjCheckNAddTwoStates(22, 20);
                  break;
               case 29:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(51, 52);
                  break;
               case 37:
                  if ((0xc7ffffff97ffffffL & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 38:
                  if ((0xc7ffffff97ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 40:
                  if ((0xc7ffffff97ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 41:
                  if (curChar == 91)
                     jjCheckNAddStates(45, 47);
                  break;
               case 42:
                  if ((0xc7ffffff97ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 44:
                  if ((0xc7ffffff97ffffffL & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 46:
                  if ((0xc7ffffff97ffffffL & l) != 0L)
                     jjAddStates(53, 54);
                  break;
               case 47:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 48:
                  if ((0xc7ffffff97ffffffL & l) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 49:
                  if (curChar == 93 && kind > 90)
                     kind = 90;
                  break;
               case 54:
                  if ((0xc7ffffff97ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 55:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAdd(56);
                  break;
               case 56:
                  if ((0xc7ffffff97ffffffL & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAdd(56);
                  break;
               case 57:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddStates(48, 50);
                  break;
               case 61:
                  jjAddStates(55, 56);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(56);
                  }
                  break;
               case 65:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(56);
                  }
                  break;
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(56);
                  }
                  break;
               case 64:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 7:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(56);
                  }
                  break;
               case 14:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(23, 25);
                  break;
               case 19:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 21:
               case 22:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(22, 20);
                  break;
               case 38:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 42:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(28, 29);
                  break;
               case 44:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 46:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(53, 54);
                  break;
               case 48:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 54:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 56:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAdd(56);
                  break;
               case 61:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(55, 56);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 63 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   38, 39, 54, 55, 36, 26, 32, 59, 61, 62, 13, 18, 25, 26, 27, 29, 
   32, 33, 26, 27, 29, 10, 11, 14, 15, 17, 21, 23, 42, 43, 44, 45, 
   49, 46, 47, 50, 45, 48, 49, 45, 51, 49, 53, 45, 49, 42, 43, 52, 
   40, 41, 56, 30, 31, 46, 47, 61, 62, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\147\162\141\160\150", "\156\145\164\167\157\162\153", 
"\151\144\151\141\147\162\141\155", "\151\144\55\167\151\164\150\55\163\166\156\157\144\145\163", "\144\141\156", 
"\165\151\144", "\142\156\145\164", "\164\151\164\154\145", 
"\153\151\156\144\157\146\147\162\141\160\150", "\143\157\155\155\145\156\164", "\141\165\164\150\157\162", 
"\167\150\157\143\150\141\156\147\145\144", "\167\150\145\156\143\150\141\156\147\145\144", 
"\166\151\163\165\141\154\160\162\145\143\151\163\151\157\156", "\166\145\162\163\151\157\156", "\154\157\143\153\145\144", 
"\143\157\156\163\151\163\164\145\156\143\171\55\160\162\157\160\145\162\164\151\145\163", "\156\157\144\145", "\146\151\156\151\164\145\55\163\164\141\164\145\163", 
"\143\157\156\164\151\156\165\157\165\163", "\154\151\156\153", "\162\145\154\141\164\151\157\156", 
"\144\145\164\145\162\155\151\156\151\163\164\151\143", "\150\145\156\162\151\157\156\126\123\144\151\145\172", 
"\164\171\160\145\55\157\146\55\166\141\162\151\141\142\154\145", "\153\151\156\144\55\157\146\55\156\157\144\145", 
"\156\165\155\55\163\164\141\164\145\163", "\165\156\151\164", "\160\157\163\137\170", "\160\157\163\137\171", 
"\163\164\141\164\145\163", "\166\141\154\165\145\163", "\164\141\142\154\145", 
"\164\141\142\154\145\55\151\156\164\145\162\166\141\154", "\164\162\145\145", "\164\162\145\145\55\151\156\164\145\162\166\141\154", 
"\143\157\156\164\151\156\165\157\165\163\55\164\162\145\145", "\143\157\156\166\145\170\55\163\145\164", 
"\143\162\145\144\141\154\55\163\145\164\55\164\162\145\145", "\143\141\163\145", "\144\145\146\141\165\154\164", 
"\144\145\146\141\165\154\164\55\151\156\164\145\162\166\141\154", "\144\145\146\141\165\154\164\55\151\156\164\145\162\166\141\154\163", 
"\144\151\162\145\143\164\145\144", "\145\166\145\162\171", "\141\143\164\151\166\145", 
"\146\165\156\143\164\151\157\156", "\156\141\155\145\55\157\146\55\162\145\154\141\164\151\157\156", 
"\153\151\156\144\55\157\146\55\162\145\154\141\164\151\157\156", "\145\170\160", "\155\151\156", "\155\141\170", "\143\150\141\156\143\145", 
"\144\145\143\151\163\151\157\156", "\157\142\163\145\162\166\145\144", "\165\164\151\154\151\164\171", 
"\163\165\160\145\162\55\166\141\154\165\145", "\160\157\164\145\156\164\151\141\154", 
"\143\157\156\144\151\164\151\157\156\141\154\55\160\162\157\142", "\165\164\151\154\151\164\171\55\143\157\155\142\151\156\141\164\151\157\156", 
"\162\145\154\145\166\141\156\143\145", "\160\165\162\160\157\163\145", "\143\157\156\163\164\162\141\151\156\164", 
"\154\157\147\151\143\141\154\55\145\170\160\162\145\163\163\151\157\156", "\107\141\165\163\163", "\151\156", "\46", "\174", "\55\76", "\74\55\76", 
"\41", "\162\141\156\147\145", 
"\147\145\156\145\162\141\154\151\172\145\144\124\141\142\154\145", null, null, null, "\50", "\51", "\54", "\133", "\135", null, null, null, null, 
"\43", null, null, null, null, "\75", null, null, null, "\173", "\175", "\73", "\53", 
"\55", "\52", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xfffffffffffffff1L, 0xffcfff3fffL, 
};
static final long[] jjtoSkip = {
   0xeL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[63];
private final int[] jjstateSet = new int[126];
protected char curChar;
public BayesNetParseTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public BayesNetParseTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 63; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
