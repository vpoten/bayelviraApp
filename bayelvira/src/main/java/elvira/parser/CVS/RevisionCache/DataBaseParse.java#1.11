/* Generated By:JavaCC: Do not edit this line. DataBaseParse.java */
package elvira.parser;

import java.util.Vector;
import java.util.Enumeration;
import java.util.Hashtable;
import java.io.*;
import elvira.Node;
import elvira.NodeList;
import elvira.potential.Potential;
import elvira.potential.PotentialTable;
import elvira.potential.PotentialTree;
import elvira.Relation;
import elvira.Link;
import elvira.LinkList;
import elvira.FiniteStates;
import elvira.Continuous;
import elvira.CaseList;
import elvira.CaseListMem;
import elvira.ContinuousCaseListMem;
import elvira.CaseListOutMem;
import elvira.Configuration;
import elvira.ContinuousConfiguration;



public class DataBaseParse implements DataBaseParseConstants {
 public String Type;
 public String Name;
 public String Title;
 public String Comment;
 public String Author;
 public String WhoChanged;
 public String WhenChanged;
 public String version;
 public boolean locked;
 public Hashtable networkPropertyList;
 public Vector Consistency;
 public NodeList Nodes;
 public Vector Relations;
 public FiniteStates DefaultFinite;
 Continuous DefaultContinuous;
 //MixedNode DefaultMixed;
 public Relation DefaultRelation;
 public int casesNumber;
 public int defaultnodetype;
 public boolean memory;
 public boolean statesdecl;





  public static void main(String args[]) throws ParseException
   ,IOException {
    FileInputStream f;

    f = new FileInputStream("ejemplo.dbc");

    DataBaseParse parser = new DataBaseParse(f);
    parser.initialize();

    parser.CompilationUnit();
    parser.Nodes.print();
    Relation relation = (Relation)parser.Relations.elementAt(0);
    CaseList cases = (CaseList)relation.getValues();
    cases.print();



  }

  public void initialize() {
    String DefaultStates[]= {"absent","present"};

   Name =  new String("");
   Title =  new String("");
   Comment =  new String("");
   Author =  new String("");
   WhoChanged =  new String("");
   WhenChanged =  new String("");
   version =  new String("1.0");
   casesNumber = 0;
   memory = false;
   Consistency = new Vector();
   Nodes = new NodeList();
   Relations = new Vector();
   DefaultFinite = new FiniteStates("Default",DefaultStates);
   DefaultContinuous = new Continuous();
   DefaultContinuous.setTitle("");
   DefaultContinuous.setComment("");
   DefaultRelation = new Relation();
   DefaultRelation.setKind(Relation.CONDITIONAL_PROB);
   DefaultFinite.setTitle("");
   DefaultFinite.setComment("");

//    parser.DefaultContinuous = new ContinuousNode();
//    parser.DefaultMixed = new MixedNode();
     defaultnodetype=1;
 }

  final public void CompilationUnit() throws ParseException {
    DataBaseDeclaration();
    jj_consume_token(56);
    jj_consume_token(0);
  }

  final public void DataBaseDeclaration() throws ParseException {
 Token T;
    databaseClass();
    if (jj_2_1(4)) {
      T = jj_consume_token(WORD);
    } else if (jj_2_2(4)) {
      T = jj_consume_token(STRING);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
 Name=(T.toString());
    jj_consume_token(57);
    databaseContent();
  }

  final public void databaseClass() throws ParseException {
    jj_consume_token(DATABASE);
                Type="database";
  }

  final public void databaseContent() throws ParseException {
    label_1:
    while (true) {
      if (jj_2_3(4)) {
        ;
      } else {
        break label_1;
      }
      if (jj_2_4(4)) {
        Property();
      } else if (jj_2_5(4)) {
        DefaultDeclaration();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(58);
    }
    label_2:
    while (true) {
      if (jj_2_6(4)) {
        ;
      } else {
        break label_2;
      }
      ElementDeclaration();
    }
  }

  final public void DefaultDeclaration() throws ParseException {
 Node N;
    if (jj_2_7(4)) {
      jj_consume_token(DEFVALUE);
    } else if (jj_2_8(4)) {
      jj_consume_token(EVERY);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_13(4)) {
      jj_consume_token(NODE);
      jj_consume_token(NODETYPE);
      jj_consume_token(EQUAL);
      jj_consume_token(FINITE);
                                          defaultnodetype=1;
    } else if (jj_2_14(4)) {
      jj_consume_token(NODE);
      if (defaultnodetype==1) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_9(4)) {
        NodeProperty(DefaultFinite);
      } else if (jj_2_10(4)) {
        FiniteProperty(DefaultFinite);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else if (jj_2_15(4)) {
      jj_consume_token(NODE);
      jj_consume_token(OPEN_PAREN);
      jj_consume_token(FINITE);
      jj_consume_token(CLOSE_PAREN);
      if (jj_2_11(4)) {
        NodeProperty(DefaultFinite);
      } else if (jj_2_12(4)) {
        FiniteProperty(DefaultFinite);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else if (jj_2_16(4)) {
      jj_consume_token(RELATION);
      RelationProperty(DefaultRelation);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Property() throws ParseException {
 Token T,NProp=null,VProp;
    if (jj_2_24(4)) {
      jj_consume_token(TITLE);
      jj_consume_token(EQUAL);
      T = jj_consume_token(STRING);
                              Title=T.image.substring(1,T.image.length()-1);
    } else if (jj_2_25(4)) {
      jj_consume_token(COMMENT);
      jj_consume_token(EQUAL);
      T = jj_consume_token(STRING);
                                Comment=T.image.substring(1,T.image.length()-1);
    } else if (jj_2_26(4)) {
      jj_consume_token(CONSISTENCY);
      jj_consume_token(EQUAL);
      jj_consume_token(OPEN_PAREN);
      jj_consume_token(CLOSE_PAREN);
    } else if (jj_2_27(4)) {
      jj_consume_token(CONSISTENCY);
      jj_consume_token(EQUAL);
      jj_consume_token(OPEN_PAREN);
      ListWords(Consistency);
      jj_consume_token(CLOSE_PAREN);
    } else if (jj_2_28(4)) {
      jj_consume_token(AUTHOR);
      jj_consume_token(EQUAL);
      T = jj_consume_token(STRING);
                                 Author=T.image.substring(1,T.image.length()-1);
    } else if (jj_2_29(4)) {
      jj_consume_token(WHOCHANGED);
      jj_consume_token(EQUAL);
      T = jj_consume_token(STRING);
                                     WhoChanged=T.image.substring(1,T.image.length()-1);
    } else if (jj_2_30(4)) {
      jj_consume_token(WHENCHANGED);
      jj_consume_token(EQUAL);
      T = jj_consume_token(STRING);
                                      WhenChanged=T.image.substring(1,T.image.length()-1);
    } else if (jj_2_31(4)) {
      jj_consume_token(LOCKED);
      jj_consume_token(EQUAL);
      T = jj_consume_token(BOOLEAN);
         if (T.image.equals("true")){locked=true;}
         else {locked=false;}
    } else if (jj_2_32(4)) {
      jj_consume_token(VERSION);
      jj_consume_token(EQUAL);
      T = jj_consume_token(FLOAT);
                              version = T.image;
    } else if (jj_2_33(4)) {
      NProp = jj_consume_token(WORD);
      jj_consume_token(EQUAL);
      if (jj_2_22(4)) {
        if (jj_2_17(4)) {
          VProp = jj_consume_token(STRING);
        } else if (jj_2_18(4)) {
          VProp = jj_consume_token(STRINGDECIMAL);
      networkPropertyList.put(NProp.image,VProp.image);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else if (jj_2_23(4)) {
        if (jj_2_19(4)) {
          VProp = jj_consume_token(BOOLEAN);
        } else if (jj_2_20(4)) {
          VProp = jj_consume_token(WORD);
        } else if (jj_2_21(4)) {
          VProp = jj_consume_token(DECIMAL_LITERAL);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      System.out.println("Warning: Encountered \"" +NProp.toString()+"="+VProp.toString()+"\" at line " + NProp.beginLine + ", column " + NProp.beginColumn  +". Ignoring it. These network property is not funtional yet\n");
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else if (jj_2_34(4)) {
      jj_consume_token(CASESNUMBER);
      jj_consume_token(EQUAL);
      T = jj_consume_token(DECIMAL_LITERAL);
      String temporal = new
           String(T.image.substring(0,T.image.length()));
           try{
              casesNumber = Integer.valueOf(temporal).intValue();
           }catch (NumberFormatException e){
              System.out.println(e);
           }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NodeProperty(Node N) throws ParseException {
 Token T,NProp,VProp;
 Double D;
    if (jj_2_46(4)) {
      jj_consume_token(TITLE);
      jj_consume_token(EQUAL);
      T = jj_consume_token(STRING);
                               N.setTitle(T.image.substring(1,T.image.length()-1));
    } else if (jj_2_47(4)) {
      jj_consume_token(COMMENT);
      jj_consume_token(EQUAL);
      T = jj_consume_token(STRING);
                                N.setComment(T.image.substring(1,T.image.length()-1));
    } else if (jj_2_48(4)) {
      jj_consume_token(NODEKIND);
      jj_consume_token(EQUAL);
      if (jj_2_35(4)) {
        T = jj_consume_token(CHANCE);
      } else if (jj_2_36(4)) {
        T = jj_consume_token(DECISION);
      } else if (jj_2_37(4)) {
        T = jj_consume_token(UTILITY);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                 N.setKindOfNode(T.image);
    } else if (jj_2_49(4)) {
      jj_consume_token(POSX);
      jj_consume_token(EQUAL);
      if (jj_2_38(4)) {
        T = jj_consume_token(INTEGER);
      } else if (jj_2_39(4)) {
        T = jj_consume_token(DECIMAL_LITERAL);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                       N.setPosX( Integer.valueOf(T.image).intValue() );
    } else if (jj_2_50(4)) {
      jj_consume_token(POSY);
      jj_consume_token(EQUAL);
      if (jj_2_40(4)) {
        T = jj_consume_token(INTEGER);
      } else if (jj_2_41(4)) {
        T = jj_consume_token(DECIMAL_LITERAL);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                       N.setPosY( Integer.valueOf(T.image).intValue() );
    } else if (jj_2_51(4)) {
      jj_consume_token(RELEVANCE);
      jj_consume_token(EQUAL);
      T = jj_consume_token(FLOAT);
                                N.setRelevance(Double.valueOf(T.image).doubleValue());
    } else if (jj_2_52(4)) {
      jj_consume_token(PURPOSE);
      jj_consume_token(EQUAL);
      T = jj_consume_token(STRING);
                               N.setPurpose(T.image.substring(1,T.image.length()-1));
    } else if (jj_2_53(4)) {
      NProp = jj_consume_token(WORD);
      jj_consume_token(EQUAL);
      if (jj_2_44(4)) {
        if (jj_2_42(4)) {
          VProp = jj_consume_token(STRING);
        } else if (jj_2_43(4)) {
          VProp = jj_consume_token(STRINGDECIMAL);
      N.putProperty(NProp.image,VProp.image);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else if (jj_2_45(4)) {
        VProp = jj_consume_token(DECIMAL_LITERAL);
      System.out.println("Warning: Encountered \"" +NProp.toString()+"="+VProp.toString()+"\" at line " + NProp.beginLine + ", column " + NProp.beginColumn  + ". Ignoring it. Node properties with a int value are not funtional yet\n");
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ElementDeclaration() throws ParseException {
    if (jj_2_54(4)) {
      NodeDeclaration();
    } else if (jj_2_55(4)) {
      RelationDeclaration();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NodeDeclaration() throws ParseException {
 Token T;
    jj_consume_token(NODE);
    if (jj_2_56(4)) {
      T = jj_consume_token(WORD);
    } else if (jj_2_57(4)) {
      T = jj_consume_token(STRING);
    } else if (jj_2_58(4)) {
      T = jj_consume_token(PARAMETER_WORD);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_61(4)) {
      DefaultNodeDeclaration(T);
    } else if (jj_2_62(4)) {
      jj_consume_token(OPEN_PAREN);
      if (jj_2_59(4)) {
        FiniteDeclaration(T);
      } else if (jj_2_60(4)) {
        ContinuousDeclaration(T);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefaultNodeDeclaration(Token T) throws ParseException {
    if (defaultnodetype==1) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    FiniteBody(T);
  }

  final public void FiniteDeclaration(Token T) throws ParseException {
    jj_consume_token(FINITE);
    jj_consume_token(CLOSE_PAREN);
    FiniteBody(T);
  }

  final public void ContinuousDeclaration(Token T) throws ParseException {
    jj_consume_token(CONTINUOUS);
    jj_consume_token(CLOSE_PAREN);
    ContinuousBody(T);
  }

  final public void FiniteBody(Token T) throws ParseException {
FiniteStates N;
N= (FiniteStates) DefaultFinite.copy();
N.setName(T.image);
    if (jj_2_63(4)) {
      jj_consume_token(57);
      FiniteNodeProperties(N);
      jj_consume_token(56);
    } else if (jj_2_64(4)) {
      jj_consume_token(58);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                                              Nodes.insertNode(N);
  }

  final public void ContinuousBody(Token T) throws ParseException {
Continuous N;
N= (Continuous) DefaultContinuous.copy();
N.setName(T.image);
    if (jj_2_65(4)) {
      jj_consume_token(57);
      ContinuousNodeProperties(N);
      jj_consume_token(56);
    } else if (jj_2_66(4)) {
      jj_consume_token(58);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                  Nodes.insertNode(N);
  }

  final public void FiniteNodeProperties(Node N) throws ParseException {
    label_3:
    while (true) {
      if (jj_2_67(4)) {
        ;
      } else {
        break label_3;
      }
      if (jj_2_68(4)) {
        NodeProperty(N);
      } else if (jj_2_69(4)) {
        FiniteProperty(N);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(58);
    }
  }

  final public void ContinuousNodeProperties(Continuous N) throws ParseException {
    label_4:
    while (true) {
      if (jj_2_70(4)) {
        ;
      } else {
        break label_4;
      }
      if (jj_2_71(4)) {
        NodeProperty(N);
      } else if (jj_2_72(4)) {
        ContinuousProperty(N);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(58);
    }
  }

  final public void FiniteProperty(Node N) throws ParseException {
 Token T;
 Vector V;
 FiniteStates M;
    if (jj_2_75(4)) {
  M = (FiniteStates) N;
      jj_consume_token(STATES);
      jj_consume_token(EQUAL);
                      V= new Vector();
      jj_consume_token(OPEN_PAREN);
      ListWords(V);
      jj_consume_token(CLOSE_PAREN);
                                                             M.setStates(V);
    } else if (jj_2_76(4)) {
      if (jj_2_73(4)) {
        jj_consume_token(NODETYPE);
        jj_consume_token(EQUAL);
        T = jj_consume_token(FINITE);
                                       N.setTypeOfVariable(T.image);
      } else if (jj_2_74(4)) {
        jj_consume_token(NUMSTATES);
        jj_consume_token(EQUAL);
        T = jj_consume_token(DECIMAL_LITERAL);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ContinuousProperty(Continuous N) throws ParseException {
 Token T;
 Double D;
    if (jj_2_87(4)) {
      jj_consume_token(NODETYPE);
      jj_consume_token(EQUAL);
      T = jj_consume_token(CONTINUOUS);
                                         N.setTypeOfVariable(T.image);
    } else if (jj_2_88(4)) {
      if (jj_2_85(4)) {
        jj_consume_token(MIN);
        jj_consume_token(EQUAL);
        if (jj_2_77(4)) {
          T = jj_consume_token(DECIMAL_LITERAL);
        } else if (jj_2_78(4)) {
          T = jj_consume_token(INTEGER);
        } else if (jj_2_79(4)) {
          T = jj_consume_token(FLOAT);
        } else if (jj_2_80(4)) {
          T = jj_consume_token(FLOATSCI);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                                    D=new Double(T.image);N.setMin(D.doubleValue());
      } else if (jj_2_86(4)) {
        jj_consume_token(MAX);
        jj_consume_token(EQUAL);
        if (jj_2_81(4)) {
          T = jj_consume_token(DECIMAL_LITERAL);
        } else if (jj_2_82(4)) {
          T = jj_consume_token(INTEGER);
        } else if (jj_2_83(4)) {
          T = jj_consume_token(FLOAT);
        } else if (jj_2_84(4)) {
          T = jj_consume_token(FLOATSCI);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                                   D=new Double(T.image);N.setMax(D.doubleValue());
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void RelationDeclaration() throws ParseException {
  Token T;
  Vector C;
  Relation R;
    jj_consume_token(RELATION);
   R = new Relation();
   R.setVariables(Nodes);
    if (jj_2_89(4)) {
      jj_consume_token(58);
    } else if (jj_2_90(4)) {
      jj_consume_token(57);
      RelationProperties(R);
      jj_consume_token(56);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                                          Relations.addElement(R);
  }

  final public void RelationProperties(Relation R) throws ParseException {
    label_5:
    while (true) {
      if (jj_2_91(4)) {
        ;
      } else {
        break label_5;
      }
      RelationProperty(R);
      jj_consume_token(58);
    }
  }

  final public void RelationProperty(Relation R) throws ParseException {
 Token T;
    if (jj_2_92(4)) {
      jj_consume_token(COMMENT);
      jj_consume_token(EQUAL);
      T = jj_consume_token(STRING);
                              R.setComment(T.image.substring(1,T.image.length()-1));
    } else if (jj_2_93(4)) {
      jj_consume_token(MEMORY);
      jj_consume_token(EQUAL);
      MemoryONOFF();
    } else if (jj_2_94(4)) {
      jj_consume_token(CASES);
      jj_consume_token(EQUAL);
      CasesDeclaration(R);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MemoryONOFF() throws ParseException {
 Token T;
    T = jj_consume_token(BOOLEAN);
                String mem = new String(T.image.substring(0,T.image.length()));
                       memory = Boolean.valueOf(mem).booleanValue();
  }

  final public void CasesDeclaration(Relation R) throws ParseException {
  CaseList cases;
  boolean relWithContinuous;

  relWithContinuous=R.withContinuousVariable();
  if(memory == true){
    if(relWithContinuous)
      cases = (CaseList)(new ContinuousCaseListMem(R.getVariables()));
    else
      cases = (CaseList)(new CaseListMem(R.getVariables()));
  }
  else {
    String FileAux = new String(Name+"db"+".bin");
    cases = (CaseList)(new CaseListOutMem(R.getVariables(),FileAux));
  }
    jj_consume_token(OPEN_PAREN);
    ListAssignments(cases,relWithContinuous);
    jj_consume_token(CLOSE_PAREN);
  R.setValues(cases);
  }

  final public void ListAssignments(CaseList cases,boolean relWithContinuous) throws ParseException {
    if (jj_2_102(4)) {
      label_6:
      while (true) {
        Assignment(cases,relWithContinuous);
        if (jj_2_95(4)) {
          jj_consume_token(COMMA);
        } else {
          ;
        }
        if (jj_2_96(4)) {
          ;
        } else {
          break label_6;
        }
      }
      if (jj_2_97(4)) {
        DefaultAssignment();
      } else {
        ;
      }
      label_7:
      while (true) {
        if (jj_2_98(4)) {
          ;
        } else {
          break label_7;
        }
        Assignment(cases,relWithContinuous);
        if (jj_2_99(4)) {
          jj_consume_token(COMMA);
        } else {
          ;
        }
      }
    } else if (jj_2_103(4)) {
      DefaultAssignment();
      label_8:
      while (true) {
        if (jj_2_100(4)) {
          ;
        } else {
          break label_8;
        }
        Assignment(cases,relWithContinuous);
        if (jj_2_101(4)) {
          jj_consume_token(COMMA);
        } else {
          ;
        }
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Assignment(CaseList cases,boolean relWithContinuous) throws ParseException {
 Vector V;
 Configuration conf;
 Double D;
 Token T;
    jj_consume_token(OPEN_COR);
    V = ListWordIntegers(cases,relWithContinuous);
    jj_consume_token(CLOSE_COR);
//System.out.println("Tama\u00f1o del vector de casos: "+V.size());
    if(relWithContinuous){
      conf = new ContinuousConfiguration(cases.getVariables(), V);
      cases.put((ContinuousConfiguration)conf);
    }
    else{
      conf = new Configuration(cases.getVariables(), V);
      cases.put(conf);
    }
  }

  final public Vector ListWordIntegers(CaseList cases, boolean relWithContinuous) throws ParseException {
 Vector V;
 Token T;
 Integer I;
 Double D;
 int i;
 int j;
   V = new Vector();
   j=0;
    label_9:
    while (true) {
      if (jj_2_104(4)) {
        ;
      } else {
        break label_9;
      }
      if (jj_2_111(4)) {
        T = jj_consume_token(DECIMAL_LITERAL);
      if( ((Node)cases.getVariables().elementAt(j)).getTypeOfVariable()== Node.FINITE_STATES ){
        I = new Integer(T.image);
        V.addElement(I);
      }
      else if( ((Node)cases.getVariables().elementAt(j)).getTypeOfVariable()== Node.CONTINUOUS ){
        D = new Double(T.image);
        V.addElement(D);
      }
      j++;
      } else if (jj_2_112(4)) {
        if (jj_2_105(4)) {
          T = jj_consume_token(INTEGER);
        } else if (jj_2_106(4)) {
          T = jj_consume_token(FLOAT);
        } else if (jj_2_107(4)) {
          T = jj_consume_token(FLOATSCI);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      if( ((Node)cases.getVariables().elementAt(j)).getTypeOfVariable()== Node.CONTINUOUS ){
        D = new Double(T.image);
        V.addElement(D);
      }
      else{
        {if (true) throw new ParseException("Case " + T.image+ " is float for the non continuous variable "+
                  ((FiniteStates)cases.getVariables().elementAt(j)).getName() );}
      }
      j++;
      } else if (jj_2_113(4)) {
        if (jj_2_108(4)) {
          T = jj_consume_token(WORD);
        } else if (jj_2_109(4)) {
          T = jj_consume_token(BOOLEAN);
        } else if (jj_2_110(4)) {
          T = jj_consume_token(STRING);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      if( ((Node)cases.getVariables().elementAt(j)).getTypeOfVariable()== Node.FINITE_STATES ){
        i = ((FiniteStates)cases.getVariables().elementAt(j)).getId(T.image);
        I = new Integer(i);
        V.addElement(I);
      }
      else if( ((Node)cases.getVariables().elementAt(j)).getTypeOfVariable()== Node.CONTINUOUS ){
        {if (true) throw new ParseException("Case " + T.image+ " is a discrete value for the continuous variable "+
                  ((Node)cases.getVariables().elementAt(j)).getName() );}
      }

      j++;
      } else if (jj_2_114(4)) {
        T = jj_consume_token(STRINGDECIMAL);
      i = ((FiniteStates) cases.getVariables().elementAt(j)).getId(T.image.substring(1,T.image.length()-1));
      if( ((Node)cases.getVariables().elementAt(j)).getTypeOfVariable()== Node.FINITE_STATES ){
        I = new Integer(i);
        V.addElement(I);
      }
      else if( ((Node)cases.getVariables().elementAt(j)).getTypeOfVariable()== Node.CONTINUOUS ){
        {if (true) throw new ParseException("Case " + T.image+ " is a discrete value for the continuous variable "+
                  ((Node)cases.getVariables().elementAt(j)).getName() );}
      }

      j++;
      } else if (jj_2_115(4)) {
        T = jj_consume_token(VALUENOTDEF);
      if( ((Node)cases.getVariables().elementAt(j)).getTypeOfVariable()== Node.FINITE_STATES ){
        I = new Integer((int)((Node)cases.getVariables().elementAt(j)).undefValue());
        V.addElement(I);
      }
      else if( ((Node)cases.getVariables().elementAt(j)).getTypeOfVariable()== Node.CONTINUOUS ){
        D = new Double(((Node)cases.getVariables().elementAt(j)).undefValue());
        V.addElement(D);
      }
      j++;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_116(4)) {
        jj_consume_token(COMMA);
      } else {
        ;
      }
    }
  {if (true) return(V);}
    throw new Error("Missing return statement in function");
  }

  final public void DefaultAssignment() throws ParseException {
 Token T;
    jj_consume_token(DEFVALUE);
    jj_consume_token(EQUAL);
    if (jj_2_117(4)) {
      T = jj_consume_token(DECIMAL_LITERAL);
    } else if (jj_2_118(4)) {
      T = jj_consume_token(INTEGER);
    } else if (jj_2_119(4)) {
      T = jj_consume_token(FLOAT);
    } else if (jj_2_120(4)) {
      T = jj_consume_token(FLOATSCI);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ListWords(Vector C) throws ParseException {
 Token T;
    if (jj_2_136(4)) {
      if (jj_2_121(4)) {
        T = jj_consume_token(WORD);
      } else if (jj_2_122(4)) {
        T = jj_consume_token(STRING);
      } else if (jj_2_123(4)) {
        T = jj_consume_token(BOOLEAN);
      } else if (jj_2_124(4)) {
        T = jj_consume_token(DECIMAL_LITERAL);
      } else if (jj_2_125(4)) {
        T = jj_consume_token(PARAMETER_WORD);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
   C.addElement(T.toString());
      jj_consume_token(COMMA);
      ListWords(C);
    } else if (jj_2_137(4)) {
      if (jj_2_126(4)) {
        T = jj_consume_token(WORD);
      } else if (jj_2_127(4)) {
        T = jj_consume_token(STRING);
      } else if (jj_2_128(4)) {
        T = jj_consume_token(BOOLEAN);
      } else if (jj_2_129(4)) {
        T = jj_consume_token(DECIMAL_LITERAL);
      } else if (jj_2_130(4)) {
        T = jj_consume_token(PARAMETER_WORD);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
   C.addElement(T.toString());
      ListWords(C);
    } else if (jj_2_138(4)) {
      if (jj_2_131(4)) {
        T = jj_consume_token(WORD);
      } else if (jj_2_132(4)) {
        T = jj_consume_token(STRING);
      } else if (jj_2_133(4)) {
        T = jj_consume_token(BOOLEAN);
      } else if (jj_2_134(4)) {
        T = jj_consume_token(DECIMAL_LITERAL);
      } else if (jj_2_135(4)) {
        T = jj_consume_token(PARAMETER_WORD);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
   C.addElement(T.toString());
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  final private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  final private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  final private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  final private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  final private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  final private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  final private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  final private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  final private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  final private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  final private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  final private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  final private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  final private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  final private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  final private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  final private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  final private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  final private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  final private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  final private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  final private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  final private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  final private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  final private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  final private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  final private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  final private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  final private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  final private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  final private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  final private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  final private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  final private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  final private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  final private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  final private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  final private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  final private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  final private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  final private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  final private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  final private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  final private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  final private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  final private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  final private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  final private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  final private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  final private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  final private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  final private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  final private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  final private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  final private boolean jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  final private boolean jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  final private boolean jj_2_102(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(101, xla); }
  }

  final private boolean jj_2_103(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_103(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(102, xla); }
  }

  final private boolean jj_2_104(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_104(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(103, xla); }
  }

  final private boolean jj_2_105(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_105(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(104, xla); }
  }

  final private boolean jj_2_106(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_106(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(105, xla); }
  }

  final private boolean jj_2_107(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_107(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(106, xla); }
  }

  final private boolean jj_2_108(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_108(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(107, xla); }
  }

  final private boolean jj_2_109(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_109(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(108, xla); }
  }

  final private boolean jj_2_110(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_110(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(109, xla); }
  }

  final private boolean jj_2_111(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_111(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(110, xla); }
  }

  final private boolean jj_2_112(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_112(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(111, xla); }
  }

  final private boolean jj_2_113(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_113(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(112, xla); }
  }

  final private boolean jj_2_114(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_114(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(113, xla); }
  }

  final private boolean jj_2_115(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_115(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(114, xla); }
  }

  final private boolean jj_2_116(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_116(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(115, xla); }
  }

  final private boolean jj_2_117(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_117(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(116, xla); }
  }

  final private boolean jj_2_118(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_118(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(117, xla); }
  }

  final private boolean jj_2_119(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_119(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(118, xla); }
  }

  final private boolean jj_2_120(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_120(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(119, xla); }
  }

  final private boolean jj_2_121(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_121(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(120, xla); }
  }

  final private boolean jj_2_122(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_122(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(121, xla); }
  }

  final private boolean jj_2_123(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_123(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(122, xla); }
  }

  final private boolean jj_2_124(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_124(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(123, xla); }
  }

  final private boolean jj_2_125(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_125(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(124, xla); }
  }

  final private boolean jj_2_126(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_126(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(125, xla); }
  }

  final private boolean jj_2_127(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_127(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(126, xla); }
  }

  final private boolean jj_2_128(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_128(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(127, xla); }
  }

  final private boolean jj_2_129(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_129(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(128, xla); }
  }

  final private boolean jj_2_130(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_130(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(129, xla); }
  }

  final private boolean jj_2_131(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_131(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(130, xla); }
  }

  final private boolean jj_2_132(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_132(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(131, xla); }
  }

  final private boolean jj_2_133(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_133(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(132, xla); }
  }

  final private boolean jj_2_134(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_134(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(133, xla); }
  }

  final private boolean jj_2_135(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_135(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(134, xla); }
  }

  final private boolean jj_2_136(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_136(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(135, xla); }
  }

  final private boolean jj_2_137(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_137(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(136, xla); }
  }

  final private boolean jj_2_138(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_138(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(137, xla); }
  }

  final private boolean jj_3_68() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_68()) {
    jj_scanpos = xsp;
    if (jj_3_69()) return true;
    }
    if (jj_scan_token(58)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_67()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_65() {
    if (jj_scan_token(57)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(56)) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3_66()) return true;
    }
    return false;
  }

  final private boolean jj_3_58() {
    if (jj_scan_token(PARAMETER_WORD)) return true;
    return false;
  }

  final private boolean jj_3_63() {
    if (jj_scan_token(57)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(56)) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3_64()) return true;
    }
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_scan_token(UTILITY)) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_scan_token(CONTINUOUS)) return true;
    if (jj_scan_token(CLOSE_PAREN)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3_43() {
    if (jj_scan_token(STRINGDECIMAL)) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    return false;
  }

  final private boolean jj_3_57() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_scan_token(FINITE)) return true;
    if (jj_scan_token(CLOSE_PAREN)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3_55() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_scan_token(DECISION)) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = defaultnodetype==1;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_33()) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3_41() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_60() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3_56() {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  final private boolean jj_3_45() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_59() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3_42() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) return true;
    }
    return false;
  }

  final private boolean jj_3_62() {
    if (jj_scan_token(OPEN_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3_60()) return true;
    }
    return false;
  }

  final private boolean jj_3_61() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(NODE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3_58()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3_61()) {
    jj_scanpos = xsp;
    if (jj_3_62()) return true;
    }
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_scan_token(CHANCE)) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_scan_token(STRINGDECIMAL)) return true;
    return false;
  }

  final private boolean jj_3_40() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3_38() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  final private boolean jj_3_54() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_54()) {
    jj_scanpos = xsp;
    if (jj_3_55()) return true;
    }
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3_53() {
    if (jj_scan_token(WORD)) return true;
    if (jj_scan_token(EQUAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) return true;
    }
    return false;
  }

  final private boolean jj_3_52() {
    if (jj_scan_token(PURPOSE)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_51() {
    if (jj_scan_token(RELEVANCE)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_50() {
    if (jj_scan_token(POSY)) return true;
    if (jj_scan_token(EQUAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) return true;
    }
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  final private boolean jj_3_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    return false;
  }

  final private boolean jj_3_49() {
    if (jj_scan_token(POSX)) return true;
    if (jj_scan_token(EQUAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) return true;
    }
    return false;
  }

  final private boolean jj_3_48() {
    if (jj_scan_token(NODEKIND)) return true;
    if (jj_scan_token(EQUAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_47() {
    if (jj_scan_token(COMMENT)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_46() {
    if (jj_scan_token(TITLE)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3_53()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_scan_token(CASESNUMBER)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_scan_token(WORD)) return true;
    if (jj_scan_token(EQUAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_scan_token(VERSION)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_scan_token(LOCKED)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_scan_token(WHENCHANGED)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_scan_token(WHOCHANGED)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_scan_token(AUTHOR)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_scan_token(CONSISTENCY)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(OPEN_PAREN)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_scan_token(CONSISTENCY)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(OPEN_PAREN)) return true;
    if (jj_scan_token(CLOSE_PAREN)) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(EVERY)) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_scan_token(COMMENT)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_scan_token(TITLE)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(RELATION)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_scan_token(NODE)) return true;
    if (jj_scan_token(OPEN_PAREN)) return true;
    if (jj_scan_token(FINITE)) return true;
    if (jj_scan_token(CLOSE_PAREN)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(NODE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = defaultnodetype==1;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_15()) return true;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    return false;
  }

  final private boolean jj_3_120() {
    if (jj_scan_token(FLOATSCI)) return true;
    return false;
  }

  final private boolean jj_3_135() {
    if (jj_scan_token(PARAMETER_WORD)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(NODE)) return true;
    if (jj_scan_token(NODETYPE)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(FINITE)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(DEFVALUE)) return true;
    return false;
  }

  final private boolean jj_3_130() {
    if (jj_scan_token(PARAMETER_WORD)) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_125() {
    if (jj_scan_token(PARAMETER_WORD)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    if (jj_scan_token(58)) return true;
    return false;
  }

  final private boolean jj_3_119() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3_134() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_129() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_124() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_118() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3_133() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  final private boolean jj_3_128() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  final private boolean jj_3_123() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  final private boolean jj_3_132() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_127() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_122() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_117() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_131() {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  final private boolean jj_3_126() {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  final private boolean jj_3_138() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_131()) {
    jj_scanpos = xsp;
    if (jj_3_132()) {
    jj_scanpos = xsp;
    if (jj_3_133()) {
    jj_scanpos = xsp;
    if (jj_3_134()) {
    jj_scanpos = xsp;
    if (jj_3_135()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_121() {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  final private boolean jj_3_137() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_126()) {
    jj_scanpos = xsp;
    if (jj_3_127()) {
    jj_scanpos = xsp;
    if (jj_3_128()) {
    jj_scanpos = xsp;
    if (jj_3_129()) {
    jj_scanpos = xsp;
    if (jj_3_130()) return true;
    }
    }
    }
    }
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_136()) {
    jj_scanpos = xsp;
    if (jj_3_137()) {
    jj_scanpos = xsp;
    if (jj_3_138()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_136() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_121()) {
    jj_scanpos = xsp;
    if (jj_3_122()) {
    jj_scanpos = xsp;
    if (jj_3_123()) {
    jj_scanpos = xsp;
    if (jj_3_124()) {
    jj_scanpos = xsp;
    if (jj_3_125()) return true;
    }
    }
    }
    }
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(DEFVALUE)) return true;
    if (jj_scan_token(EQUAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_117()) {
    jj_scanpos = xsp;
    if (jj_3_118()) {
    jj_scanpos = xsp;
    if (jj_3_119()) {
    jj_scanpos = xsp;
    if (jj_3_120()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_99() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3_116() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3_115() {
    if (jj_scan_token(VALUENOTDEF)) return true;
    return false;
  }

  final private boolean jj_3_110() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_107() {
    if (jj_scan_token(FLOATSCI)) return true;
    return false;
  }

  final private boolean jj_3_114() {
    if (jj_scan_token(STRINGDECIMAL)) return true;
    return false;
  }

  final private boolean jj_3_109() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  final private boolean jj_3_98() {
    if (jj_3R_29()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_99()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_106() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3_108() {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  final private boolean jj_3_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_108()) {
    jj_scanpos = xsp;
    if (jj_3_109()) {
    jj_scanpos = xsp;
    if (jj_3_110()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_101() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3_105() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_105()) {
    jj_scanpos = xsp;
    if (jj_3_106()) {
    jj_scanpos = xsp;
    if (jj_3_107()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_97() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_95() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3_111() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_111()) {
    jj_scanpos = xsp;
    if (jj_3_112()) {
    jj_scanpos = xsp;
    if (jj_3_113()) {
    jj_scanpos = xsp;
    if (jj_3_114()) {
    jj_scanpos = xsp;
    if (jj_3_115()) return true;
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3_116()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_36() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_104()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_100() {
    if (jj_3R_29()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_101()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(OPEN_COR)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(CLOSE_COR)) return true;
    return false;
  }

  final private boolean jj_3_96() {
    if (jj_3R_29()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_95()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_103() {
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_100()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_80() {
    if (jj_scan_token(FLOATSCI)) return true;
    return false;
  }

  final private boolean jj_3_84() {
    if (jj_scan_token(FLOATSCI)) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_102()) {
    jj_scanpos = xsp;
    if (jj_3_103()) return true;
    }
    return false;
  }

  final private boolean jj_3_102() {
    Token xsp;
    if (jj_3_96()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_96()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_97()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_98()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_scan_token(OPEN_PAREN)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3_79() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3_83() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3_78() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3_82() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  final private boolean jj_3_94() {
    if (jj_scan_token(CASES)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3_93() {
    if (jj_scan_token(MEMORY)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_92()) {
    jj_scanpos = xsp;
    if (jj_3_93()) {
    jj_scanpos = xsp;
    if (jj_3_94()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_92() {
    if (jj_scan_token(COMMENT)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_91() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(58)) return true;
    return false;
  }

  final private boolean jj_3_90() {
    if (jj_scan_token(57)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(56)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_91()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) return true;
    }
    return false;
  }

  final private boolean jj_3_77() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_81() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_89() {
    if (jj_scan_token(58)) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(RELATION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_89()) {
    jj_scanpos = xsp;
    if (jj_3_90()) return true;
    }
    return false;
  }

  final private boolean jj_3_66() {
    if (jj_scan_token(58)) return true;
    return false;
  }

  final private boolean jj_3_85() {
    if (jj_scan_token(MIN)) return true;
    if (jj_scan_token(EQUAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_77()) {
    jj_scanpos = xsp;
    if (jj_3_78()) {
    jj_scanpos = xsp;
    if (jj_3_79()) {
    jj_scanpos = xsp;
    if (jj_3_80()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_86() {
    if (jj_scan_token(MAX)) return true;
    if (jj_scan_token(EQUAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_81()) {
    jj_scanpos = xsp;
    if (jj_3_82()) {
    jj_scanpos = xsp;
    if (jj_3_83()) {
    jj_scanpos = xsp;
    if (jj_3_84()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_85()) {
    jj_scanpos = xsp;
    if (jj_3_86()) return true;
    }
    return false;
  }

  final private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_87()) {
    jj_scanpos = xsp;
    if (jj_3_88()) return true;
    }
    return false;
  }

  final private boolean jj_3_72() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3_87() {
    if (jj_scan_token(NODETYPE)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(CONTINUOUS)) return true;
    return false;
  }

  final private boolean jj_3_69() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3_73() {
    if (jj_scan_token(NODETYPE)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(FINITE)) return true;
    return false;
  }

  final private boolean jj_3_74() {
    if (jj_scan_token(NUMSTATES)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_64() {
    if (jj_scan_token(58)) return true;
    return false;
  }

  final private boolean jj_3_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_73()) {
    jj_scanpos = xsp;
    if (jj_3_74()) return true;
    }
    return false;
  }

  final private boolean jj_3_75() {
    if (jj_scan_token(STATES)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(OPEN_PAREN)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_75()) {
    jj_scanpos = xsp;
    if (jj_3_76()) return true;
    }
    return false;
  }

  final private boolean jj_3_71() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_71()) {
    jj_scanpos = xsp;
    if (jj_3_72()) return true;
    }
    if (jj_scan_token(58)) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_70()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  public DataBaseParseTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[138];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public DataBaseParse(java.io.InputStream stream) {
     this(stream, null);
  }
  public DataBaseParse(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DataBaseParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public DataBaseParse(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DataBaseParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public DataBaseParse(DataBaseParseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(DataBaseParseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[59];
    for (int i = 0; i < 59; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 59; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 138; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
            case 99: jj_3_100(); break;
            case 100: jj_3_101(); break;
            case 101: jj_3_102(); break;
            case 102: jj_3_103(); break;
            case 103: jj_3_104(); break;
            case 104: jj_3_105(); break;
            case 105: jj_3_106(); break;
            case 106: jj_3_107(); break;
            case 107: jj_3_108(); break;
            case 108: jj_3_109(); break;
            case 109: jj_3_110(); break;
            case 110: jj_3_111(); break;
            case 111: jj_3_112(); break;
            case 112: jj_3_113(); break;
            case 113: jj_3_114(); break;
            case 114: jj_3_115(); break;
            case 115: jj_3_116(); break;
            case 116: jj_3_117(); break;
            case 117: jj_3_118(); break;
            case 118: jj_3_119(); break;
            case 119: jj_3_120(); break;
            case 120: jj_3_121(); break;
            case 121: jj_3_122(); break;
            case 122: jj_3_123(); break;
            case 123: jj_3_124(); break;
            case 124: jj_3_125(); break;
            case 125: jj_3_126(); break;
            case 126: jj_3_127(); break;
            case 127: jj_3_128(); break;
            case 128: jj_3_129(); break;
            case 129: jj_3_130(); break;
            case 130: jj_3_131(); break;
            case 131: jj_3_132(); break;
            case 132: jj_3_133(); break;
            case 133: jj_3_134(); break;
            case 134: jj_3_135(); break;
            case 135: jj_3_136(); break;
            case 136: jj_3_137(); break;
            case 137: jj_3_138(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
