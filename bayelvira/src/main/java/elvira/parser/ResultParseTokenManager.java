/* Generated By:JavaCC: Do not edit this line. ResultParseTokenManager.java */
package elvira.parser;
//import java.util.Enumeration;

import java.io.*;
import java.util.Vector;
import elvira.Node;
import elvira.FiniteStates;
import elvira.NodeList;
import elvira.Relation;
import elvira.RelationList;
import elvira.potential.PotentialTable;
import elvira.Configuration;

public class ResultParseTokenManager implements ResultParseConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 19;
            return 7;
         }
         if ((active0 & 0x130L) != 0L)
         {
            jjmatchedKind = 19;
            return 42;
         }
         if ((active0 & 0x480L) != 0L)
         {
            jjmatchedKind = 19;
            return 3;
         }
         return -1;
      case 1:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
            return 6;
         }
         if ((active0 & 0x1b0L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
            return 42;
         }
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
            return 2;
         }
         return -1;
      case 2:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 2;
            return 43;
         }
         if ((active0 & 0x1b0L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 2;
            return 42;
         }
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 2;
            return 5;
         }
         return -1;
      case 3:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 3;
            return 43;
         }
         if ((active0 & 0x10L) != 0L)
            return 42;
         if ((active0 & 0x1a0L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 3;
            return 42;
         }
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 3;
            return 42;
         }
         return -1;
      case 4:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 4;
            return 42;
         }
         if ((active0 & 0x80L) != 0L)
            return 42;
         if ((active0 & 0x120L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 4;
            return 42;
         }
         return -1;
      case 5:
         if ((active0 & 0x20L) != 0L)
            return 42;
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 5;
            return 42;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 12);
      case 41:
         return jjStopAtPos(0, 13);
      case 44:
         return jjStopAtPos(0, 14);
      case 59:
         return jjStopAtPos(0, 24);
      case 61:
         return jjStopAtPos(0, 6);
      case 91:
         return jjStopAtPos(0, 25);
      case 93:
         return jjStopAtPos(0, 26);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x10L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x480L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x20L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8a0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x110L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x10L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x820L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 4, 42);
         else if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 42);
         break;
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 7, 42);
         else if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0x120L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 115:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 5, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 42;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((0xd7ff6cfafffff9ffL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(11);
                  }
                  if ((0xd7ff6cfafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 6:
                  if ((0xd7ff6cfafffff9ffL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(11);
                  }
                  if ((0xd7ff6cfafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 5:
                  if ((0xd7ff6cfafffff9ffL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(11);
                  }
                  if ((0xd7ff6cfafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 0:
                  if ((0xd7ff6cfafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  else if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 47)
                     jjAddStates(3, 4);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 15)
                        kind = 15;
                     jjCheckNAddStates(5, 10);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 3:
                  if ((0xd7ff6cfafffff9ffL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(11);
                  }
                  if ((0xd7ff6cfafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 42:
                  if ((0xd7ff6cfafffff9ffL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(11);
                  }
                  if ((0xd7ff6cfafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 2:
                  if ((0xd7ff6cfafffff9ffL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(11);
                  }
                  if ((0xd7ff6cfafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 43:
                  if ((0xd7ff6cfafffff9ffL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(11);
                  }
                  if ((0xd7ff6cfafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if ((0xd7ff6cfafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 11:
                  if ((0xd7ff6cfafffff9ffL & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAdd(11);
                  break;
               case 12:
                  if (curChar == 47)
                     jjAddStates(3, 4);
                  break;
               case 13:
                  if (curChar == 47)
                     jjCheckNAddStates(14, 16);
                  break;
               case 14:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 15:
               case 16:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 17:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 19:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 20:
                  if (curChar == 42)
                     jjAddStates(17, 18);
                  break;
               case 21:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 20);
                  break;
               case 22:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 20);
                  break;
               case 23:
                  if (curChar == 47 && kind > 3)
                     kind = 3;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddStates(5, 10);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAdd(25);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 27:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 30:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAdd(31);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 33:
                  if (curChar != 46)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(34);
                  break;
               case 35:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(36);
                  break;
               case 37:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 39:
                  if (curChar == 34 && kind > 22)
                     kind = 22;
                  break;
               case 40:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 41:
                  if (curChar == 34 && kind > 23)
                     kind = 23;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(11);
                  }
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(11);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(11);
                  }
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(11);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(11);
                  }
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(11);
                  }
                  if (curChar == 115)
                     jjCheckNAdd(1);
                  break;
               case 0:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(11);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(11);
                  }
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(11);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 42:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(11);
                  }
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(11);
                  }
                  break;
               case 2:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(11);
                  }
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(11);
                  }
                  if (curChar == 117)
                     jjCheckNAdd(1);
                  break;
               case 43:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(11);
                  }
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(11);
                  }
                  if (curChar == 101)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  break;
               case 1:
                  if (curChar == 101 && kind > 9)
                     kind = 9;
                  break;
               case 4:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 8:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0xc7ffffffd7ffffffL & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAdd(11);
                  break;
               case 14:
                  jjAddStates(14, 16);
                  break;
               case 19:
                  jjCheckNAddTwoStates(19, 20);
                  break;
               case 21:
               case 22:
                  jjCheckNAddTwoStates(22, 20);
                  break;
               case 29:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 40:
                  jjAddStates(22, 23);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(11);
                  }
                  break;
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(11);
                  }
                  break;
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(11);
                  }
                  break;
               case 0:
               case 9:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(11);
                  }
                  break;
               case 42:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(11);
                  }
                  break;
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(11);
                  }
                  break;
               case 43:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(11);
                  }
                  break;
               case 11:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAdd(11);
                  break;
               case 14:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(14, 16);
                  break;
               case 19:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 21:
               case 22:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(22, 20);
                  break;
               case 40:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(22, 23);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 42 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   38, 40, 41, 13, 18, 25, 26, 27, 29, 32, 33, 36, 26, 32, 14, 15, 
   17, 21, 23, 26, 27, 29, 40, 41, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\156\157\144\145", "\166\141\154\165\145\163", "\75", 
"\164\141\142\154\145", "\143\157\155\155\145\156\164", null, "\164\162\165\145", 
"\146\141\154\163\145", "\50", "\51", "\54", null, null, null, null, null, null, null, null, null, 
"\73", "\133", "\135", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x7cffff1L, 
};
static final long[] jjtoSkip = {
   0xeL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[42];
private final int[] jjstateSet = new int[84];
protected char curChar;
public ResultParseTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public ResultParseTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 42; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
