/* Generated By:JavaCC: Do not edit this line. DataBaseParseTokenManager.java */
package elvira.parser;
import java.util.Vector;
import java.util.Enumeration;
import java.util.Hashtable;
import java.io.*;
import elvira.Node;
import elvira.NodeList;
import elvira.potential.Potential;
import elvira.potential.PotentialTable;
import elvira.potential.PotentialTree;
import elvira.Relation;
import elvira.Link;
import elvira.LinkList;
import elvira.FiniteStates;
import elvira.Continuous;
import elvira.CaseList;
import elvira.CaseListMem;
import elvira.ContinuousCaseListMem;
import elvira.CaseListOutMem;
import elvira.Configuration;
import elvira.ContinuousConfiguration;

public class DataBaseParseTokenManager implements DataBaseParseConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4000010020L) != 0L)
         {
            jjmatchedKind = 46;
            return 3;
         }
         if ((active0 & 0xffffebfd0L) != 0L)
         {
            jjmatchedKind = 46;
            return 60;
         }
         if ((active0 & 0x8000004000L) != 0L)
         {
            jjmatchedKind = 46;
            return 7;
         }
         if ((active0 & 0x1000000000L) != 0L)
            return 61;
         return -1;
      case 1:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 1;
            return 2;
         }
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 1;
            return 6;
         }
         if ((active0 & 0xffffffff0L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 1;
            return 60;
         }
         return -1;
      case 2:
         if ((active0 & 0xf9ffffff0L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 2;
            return 60;
         }
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 2;
            return 5;
         }
         if ((active0 & 0x60000000L) != 0L)
            return 60;
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 2;
            return 62;
         }
         return -1;
      case 3:
         if ((active0 & 0x2000L) != 0L)
            return 60;
         if ((active0 & 0xf9ffbdff0L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 3;
            return 60;
         }
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 3;
            return 62;
         }
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 3;
            return 60;
         }
         if ((active0 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 4;
            return 60;
         }
         if ((active0 & 0x2980020L) != 0L)
            return 60;
         if ((active0 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x30010L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xf9d60dfc0L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 4;
            return 60;
         }
         return -1;
      case 5:
         if ((active0 & 0xf1500d740L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 5;
            return 60;
         }
         if ((active0 & 0x88600880L) != 0L)
            return 60;
         if ((active0 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x30010L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0xa01000440L) != 0L)
            return 60;
         if ((active0 & 0x10004000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x504009300L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 6;
            return 60;
         }
         if ((active0 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x30010L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x400009300L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 7;
            return 60;
         }
         if ((active0 & 0x104000000L) != 0L)
            return 60;
         if ((active0 & 0x10004000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x30010L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x400000000L) != 0L)
            return 60;
         if ((active0 & 0x9300L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 8;
            return 60;
         }
         if ((active0 & 0x10004000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x30010L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x1200L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 9;
            return 60;
         }
         if ((active0 & 0x8100L) != 0L)
            return 60;
         if ((active0 & 0x10004000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x30000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 10;
            return 60;
         }
         if ((active0 & 0x200L) != 0L)
            return 60;
         if ((active0 & 0x10004000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x30000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x10004000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x30000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x10004000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x10000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x10000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 40);
      case 41:
         return jjStopAtPos(0, 41);
      case 44:
         return jjStopAtPos(0, 42);
      case 59:
         return jjStopAtPos(0, 58);
      case 61:
         return jjStopAtPos(0, 53);
      case 63:
         return jjStartNfaWithStates_0(0, 36, 61);
      case 91:
         return jjStopAtPos(0, 43);
      case 93:
         return jjStopAtPos(0, 44);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x80809040L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x101000010L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x8000004000L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x68000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x10042000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x800180000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x404000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x4000010020L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x400400L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x300L);
      case 123:
         return jjStopAtPos(0, 57);
      case 125:
         return jjStopAtPos(0, 56);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8040c00010L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x50d000400L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000300L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x20024020L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x18b840L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x200200000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x810040080L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x80200000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000800L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000200L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8404400000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x18040040L);
      case 110:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 29, 60);
         return jjMoveStringLiteralDfa3_0(active0, 0x2d000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000400L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x980000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0xb0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 120:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 30, 60);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x180000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x5000010L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 60);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 60);
         return jjMoveStringLiteralDfa4_0(active0, 0x400810000L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100004000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000020L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000200L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000001400L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x208000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x30010L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000200L);
      case 101:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 5, 60);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 60);
         return jjMoveStringLiteralDfa5_0(active0, 0x10600840L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x200009400L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000080L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 115:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 60);
         return jjMoveStringLiteralDfa5_0(active0, 0x100040000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x4004000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 120:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 60);
         break;
      case 121:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 60);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 60);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000100L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x10L);
      case 100:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 60);
         break;
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 60);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x104000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x8040L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x30400L);
      case 114:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 60);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 115:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 60);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 60);
         return jjMoveStringLiteralDfa6_0(active0, 0x800001000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x200040000L);
      case 121:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 60);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x10004000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x40210L);
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 60);
         break;
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x30000L);
      case 110:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 10, 60);
         return jjMoveStringLiteralDfa7_0(active0, 0x400000100L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x104000000L);
      case 116:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 6, 60);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 60);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
      case 121:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 60);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x30000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x100L);
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 26, 60);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 32, 60);
         return jjMoveStringLiteralDfa8_0(active0, 0x200L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x10008000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x4010L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(8, 4);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(8, 34, 60);
         return jjMoveStringLiteralDfa9_0(active0, 0x40100L);
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000L);
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x200L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x21000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000L);
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x14000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000L);
      case 100:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(9, 8, 60);
         break;
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x200L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000L);
      case 115:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(9, 15, 60);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(9, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000L);
      case 100:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(10, 9, 60);
         return jjMoveStringLiteralDfa11_0(active0, 0x20000L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000L);
      case 121:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000L);
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(11, 17);
         return jjMoveStringLiteralDfa12_0(active0, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000L);
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000L);
      case 115:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(12, 14);
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000L);
      case 115:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(14, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(15, 16);
         break;
      case 112:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa18_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
private final int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa21_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
private final int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(21, 12);
         break;
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 60;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(40);
                  }
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 0:
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 47)
                     jjAddStates(10, 11);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAddStates(12, 18);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  break;
               case 3:
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(40);
                  }
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 2:
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(40);
                  }
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 60:
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(40);
                  }
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 61:
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 7:
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(40);
                  }
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 62:
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(40);
                  }
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 6:
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(40);
                  }
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 9:
                  if (curChar == 47)
                     jjAddStates(10, 11);
                  break;
               case 10:
                  if (curChar == 47)
                     jjCheckNAddStates(19, 21);
                  break;
               case 11:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 12:
               case 13:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 14:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 16:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 42)
                     jjAddStates(22, 23);
                  break;
               case 18:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(19, 17);
                  break;
               case 19:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(19, 17);
                  break;
               case 20:
                  if (curChar == 47 && kind > 3)
                     kind = 3;
                  break;
               case 21:
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 22:
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 24:
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 26:
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjAddStates(24, 25);
                  break;
               case 28:
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 29:
                  if (curChar == 44)
                     jjCheckNAddStates(29, 32);
                  break;
               case 30:
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 32:
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 34:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 36:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(39, 41);
                  break;
               case 38:
                  if ((0xd7ff40fafffff9ffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
                  if ((0xd7ff40fafffff9ffL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(40);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddStates(12, 18);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(43);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(44);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 44);
                  break;
               case 46:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 49:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(50);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 52:
                  if (curChar != 46)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(53);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(53);
                  break;
               case 54:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 55:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 57:
                  if (curChar == 34 && kind > 54)
                     kind = 54;
                  break;
               case 58:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 59:
                  if (curChar == 34 && kind > 55)
                     kind = 55;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(40);
                  }
                  else if (curChar == 91)
                     jjCheckNAddStates(45, 48);
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(40);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  if (curChar == 115)
                     jjCheckNAdd(1);
                  break;
               case 0:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAddStates(49, 51);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(40);
                  }
                  else if (curChar == 91)
                     jjCheckNAddStates(45, 48);
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(40);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(40);
                  }
                  else if (curChar == 91)
                     jjCheckNAddStates(45, 48);
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(40);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  if (curChar == 117)
                     jjCheckNAdd(1);
                  break;
               case 60:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(40);
                  }
                  else if (curChar == 91)
                     jjCheckNAddStates(45, 48);
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(40);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 61:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(40);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 7:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(40);
                  }
                  else if (curChar == 91)
                     jjCheckNAddStates(45, 48);
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(40);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 62:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(40);
                  }
                  else if (curChar == 91)
                     jjCheckNAddStates(45, 48);
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(40);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  if (curChar == 101)
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  break;
               case 6:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(40);
                  }
                  else if (curChar == 91)
                     jjCheckNAddStates(45, 48);
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(40);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 1:
                  if (curChar == 101 && kind > 37)
                     kind = 37;
                  break;
               case 4:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 8:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 11:
                  jjAddStates(19, 21);
                  break;
               case 16:
                  jjCheckNAddTwoStates(16, 17);
                  break;
               case 18:
               case 19:
                  jjCheckNAddTwoStates(19, 17);
                  break;
               case 21:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 22:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 23:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 24:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 25:
                  if (curChar == 91)
                     jjCheckNAddStates(45, 48);
                  break;
               case 26:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(26, 27);
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 28:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 30:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjAddStates(52, 53);
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 32:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 33:
                  if (curChar == 93 && kind > 45)
                     kind = 45;
                  break;
               case 38:
                  if ((0xc7ffffffd7ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0xc7ffffffd7ffffffL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(40);
                  break;
               case 41:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddStates(49, 51);
                  break;
               case 48:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 58:
                  jjAddStates(54, 55);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(40);
                  }
                  break;
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(40);
                  }
                  break;
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(40);
                  }
                  break;
               case 60:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(40);
                  }
                  break;
               case 61:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 7:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(40);
                  }
                  break;
               case 62:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(40);
                  }
                  break;
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(40);
                  }
                  break;
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(19, 21);
                  break;
               case 16:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 18:
               case 19:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(19, 17);
                  break;
               case 22:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 24:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 26:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(24, 25);
                  break;
               case 28:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 30:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(52, 53);
                  break;
               case 32:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 38:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(40);
                  break;
               case 58:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(54, 55);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 60 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   22, 23, 38, 39, 44, 45, 51, 56, 58, 59, 10, 15, 43, 44, 45, 46, 
   48, 51, 52, 11, 12, 14, 18, 20, 26, 27, 28, 29, 33, 30, 31, 34, 
   35, 29, 32, 33, 29, 35, 33, 37, 29, 33, 45, 46, 48, 26, 27, 36, 
   37, 24, 25, 40, 30, 31, 58, 59, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\144\141\164\141\55\142\141\163\145", 
"\164\151\164\154\145", "\143\157\155\155\145\156\164", "\141\165\164\150\157\162", 
"\167\150\157\143\150\141\156\147\145\144", "\167\150\145\156\143\150\141\156\147\145\144", 
"\166\145\162\163\151\157\156", "\154\157\143\153\145\144", 
"\143\157\156\163\151\163\164\145\156\143\171\55\160\162\157\160\145\162\164\151\145\163", "\156\157\144\145", "\146\151\156\151\164\145\55\163\164\141\164\145\163", 
"\143\157\156\164\151\156\165\157\165\163", "\164\171\160\145\55\157\146\55\166\141\162\151\141\142\154\145", 
"\153\151\156\144\55\157\146\55\156\157\144\145", "\156\165\155\55\163\164\141\164\145\163", "\160\157\163\137\170", 
"\160\157\163\137\171", "\163\164\141\164\145\163", "\166\141\154\165\145\163", 
"\143\141\163\145\163", "\144\145\146\141\165\154\164", "\145\166\145\162\171", 
"\162\145\154\141\164\151\157\156", "\155\145\155\157\162\171", 
"\156\165\155\142\145\162\55\157\146\55\143\141\163\145\163", "\155\151\156", "\155\141\170", "\143\150\141\156\143\145", 
"\144\145\143\151\163\151\157\156", "\165\164\151\154\151\164\171", "\162\145\154\145\166\141\156\143\145", 
"\160\165\162\160\157\163\145", "\77", null, "\164\162\165\145", "\146\141\154\163\145", "\50", "\51", "\54", 
"\133", "\135", null, null, null, null, null, null, null, null, "\75", null, null, 
"\175", "\173", "\73", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x7fe7ffffffffff1L, 
};
static final long[] jjtoSkip = {
   0xeL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[60];
private final int[] jjstateSet = new int[120];
protected char curChar;
public DataBaseParseTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public DataBaseParseTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 60; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
