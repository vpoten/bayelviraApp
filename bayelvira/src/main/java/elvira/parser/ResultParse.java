/* Generated By:JavaCC: Do not edit this line. ResultParse.java */
package elvira.parser;

//import java.util.Enumeration;

import java.io.*;
import java.util.Vector;


import elvira.Node;
import elvira.FiniteStates;
import elvira.NodeList;
import elvira.Relation;
import elvira.RelationList;
import elvira.potential.PotentialTable;
import elvira.Configuration;


public class ResultParse implements ResultParseConstants {




 NodeList Nodes;
 public RelationList Results;





  public static void main(String args[]) throws ParseException
   ,IOException {
    FileInputStream f;
    //NodeList Nodes;

    f = new FileInputStream("correct.res");

    ResultParse parser = new ResultParse(f);



     }

  public void initialize(NodeList N) {



   Nodes = N;
   Results=new RelationList();


    }

  final public void CompilationUnit() throws ParseException {
    label_1:
    while (true) {
      if (jj_2_1(4)) {
        ;
      } else {
        break label_1;
      }
      RelationDeclaration();
    }
    jj_consume_token(0);
  }

  final public void RelationDeclaration() throws ParseException {
 Token T;
 Vector C;
 Relation R;
    jj_consume_token(NODE);
          R = new Relation(); C = new Vector();
    ListWords(C);
               R.setVariablesFromNames(C,Nodes);
    if (jj_2_2(4)) {
      jj_consume_token(24);
    } else {
      RelationProperties(R);
    }
                                    Results.insertRelation(R);
  }

  final public void RelationProperties(Relation R) throws ParseException {
    label_2:
    while (true) {
      if (jj_2_3(4)) {
        ;
      } else {
        break label_2;
      }
      RelationProperty(R);
      jj_consume_token(24);
    }
  }

  final public void RelationProperty(Relation R) throws ParseException {
 Token T;
    if (jj_2_4(4)) {
      jj_consume_token(COMMENT);
      jj_consume_token(EQUAL);
      T = jj_consume_token(STRING);
                              R.setComment(T.image.substring(1,T.image.length()-1));
    } else if (jj_2_5(4)) {
      jj_consume_token(VALUES);
      jj_consume_token(EQUAL);
      TableDeclaration(R);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TableDeclaration(Relation R) throws ParseException {
 PotentialTable T;
 int i;
    jj_consume_token(TABLE);
   T = new PotentialTable(R.getVariables()); T.setValue(-1.0);
    jj_consume_token(OPEN_PAREN);
    ListAssignments(T);
    jj_consume_token(CLOSE_PAREN);
  R.setValues(T);
  }

  final public void ListAssignments(PotentialTable T) throws ParseException {
    label_3:
    while (true) {
      if (jj_2_6(4)) {
        ;
      } else {
        break label_3;
      }
      Assignment(T);
      if (jj_2_7(4)) {
        jj_consume_token(COMMA);
      } else {
        ;
      }
    }
  }

  final public void Assignment(PotentialTable Table) throws ParseException {
 Vector V;
 Configuration C;
 Double D;
 Token T;
    jj_consume_token(25);
    V = ListWordIntegers(Table);
    jj_consume_token(26);
    jj_consume_token(EQUAL);
    if (jj_2_8(4)) {
      T = jj_consume_token(DECIMAL_LITERAL);
    } else if (jj_2_9(4)) {
      T = jj_consume_token(INTEGER);
    } else if (jj_2_10(4)) {
      T = jj_consume_token(FLOAT);
    } else if (jj_2_11(4)) {
      T = jj_consume_token(FLOATSCI);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    D= new Double(T.image);
    C = new Configuration(Table.getVariables(), V);

    Table.setValue(C,D.doubleValue());
  }

  final public void ListFloats(PotentialTable Table) throws ParseException {
 Token T;
 int i;
 Double D;
   i=0;
    label_4:
    while (true) {
      if (jj_2_12(4)) {
        ;
      } else {
        break label_4;
      }
      if (jj_2_13(4)) {
        T = jj_consume_token(DECIMAL_LITERAL);
      } else if (jj_2_14(4)) {
        T = jj_consume_token(INTEGER);
      } else if (jj_2_15(4)) {
        T = jj_consume_token(FLOAT);
      } else if (jj_2_16(4)) {
        T = jj_consume_token(FLOATSCI);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
   D= new Double(T.image);Table.setValue(i,D.doubleValue());i++;
      if (jj_2_17(4)) {
        jj_consume_token(COMMA);
      } else {
        ;
      }
    }
  }

  final public void ListWords(Vector C) throws ParseException {
 Token T;
    if (jj_2_24(4)) {
      if (jj_2_18(4)) {
        T = jj_consume_token(WORD);
      } else if (jj_2_19(4)) {
        T = jj_consume_token(DECIMAL_LITERAL);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                                   System.out.println(T.toString());C.addElement(T.toString());
      jj_consume_token(COMMA);
      ListWords(C);
    } else if (jj_2_25(4)) {
      if (jj_2_20(4)) {
        T = jj_consume_token(WORD);
      } else if (jj_2_21(4)) {
        T = jj_consume_token(DECIMAL_LITERAL);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                                   C.addElement(T.toString());
      ListWords(C);
    } else if (jj_2_26(4)) {
      if (jj_2_22(4)) {
        T = jj_consume_token(WORD);
      } else if (jj_2_23(4)) {
        T = jj_consume_token(DECIMAL_LITERAL);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                                   C.addElement(T.toString());
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Vector ListWordIntegers(PotentialTable Table) throws ParseException {
 Vector V;
 Token T;
 Integer I;
 int i;
 int j;
   V = new Vector();j=0;
    label_5:
    while (true) {
      if (jj_2_27(4)) {
        ;
      } else {
        break label_5;
      }
      if (jj_2_31(4)) {
        T = jj_consume_token(DECIMAL_LITERAL);
                         I = new Integer(T.image);V.addElement(I);j++;
      } else if (jj_2_32(4)) {
        if (jj_2_28(4)) {
          T = jj_consume_token(WORD);
        } else if (jj_2_29(4)) {
          T = jj_consume_token(BOOLEAN);
        } else if (jj_2_30(4)) {
          T = jj_consume_token(STRING);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
                                      i = (( FiniteStates) Table.getVariables().elementAt(j)).getId(T.image);

  I = new Integer(i);V.addElement(I);
               j++;
      } else if (jj_2_33(4)) {
        T = jj_consume_token(STRINGDECIMAL);
                       i = (( FiniteStates) Table.getVariables().elementAt(j)).getId(T.image.substring(1,T.image.length()-1));
               I = new Integer(i);V.addElement(I);
               j++;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_34(4)) {
        jj_consume_token(COMMA);
      } else {
        ;
      }
    }
  {if (true) return(V);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_3R_8() {
    if (jj_scan_token(TABLE)) return true;
    if (jj_scan_token(OPEN_PAREN)) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(FLOATSCI)) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(VALUES)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(COMMENT)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_7()) return true;
    if (jj_scan_token(24)) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(FLOATSCI)) return true;
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) return true;
    }
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_scan_token(STRINGDECIMAL)) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(24)) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  final private boolean jj_3_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_6() {
    if (jj_scan_token(NODE)) return true;
    if (jj_3R_10()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3_34()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_12() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_6()) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  final private boolean jj_3_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    return false;
  }

  final private boolean jj_3_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) return true;
    }
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3_17()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    if (jj_scan_token(25)) return true;
    if (jj_3R_12()) return true;
    if (jj_scan_token(26)) return true;
    if (jj_scan_token(EQUAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_9()) return true;
    return false;
  }

  public ResultParseTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[34];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public ResultParse(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ResultParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ResultParse(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ResultParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ResultParse(ResultParseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(ResultParseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[27];
    for (int i = 0; i < 27; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 27; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 34; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
